{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  // Fetch the meta-model from the backend\n  const fetchMetaModel = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/meta-model', {\n        method: 'GET'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Meta-model data:', data); // Log the response data to check\n\n        setMetaModel(data);\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: data.msg\n        }]);\n        setTimeout(() => {\n          askNextQuestion(data);\n        }, 1000); // Wait 1 second before asking the first question\n      } else {\n        throw new Error('Failed to fetch meta-model');\n      }\n    } catch (error) {\n      console.error('Error fetching meta-model:', error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: `Error: ${error.message}`\n      }]);\n    }\n  };\n  useEffect(() => {\n    // Automatically fetch meta-model when component is mounted\n    fetchMetaModel();\n  }, []);\n\n  // Function to handle sending user messages and responses\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      // Show user message in chat\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"user\",\n        text: input\n      }]);\n\n      // Save the response in the userResponses state\n      if (metaModel) {\n        const currentAttribute = metaModel.reportMetaModel.attributes[currentQuestionIndex];\n        const response = input.trim();\n        setUserResponses(prevResponses => ({\n          ...prevResponses,\n          [currentAttribute.name]: response\n        }));\n      }\n      setInput(''); // Clear the input field\n\n      // If more questions exist, ask the next one\n      if (currentQuestionIndex < metaModel.reportMetaModel.attributes.length - 1) {\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\n      } else {\n        summarizeResponses();\n      }\n    }\n  };\n\n  // Ask the next question based on the current question index\n  const askNextQuestion = data => {\n    const currentAttribute = data.reportMetaModel.attributes[currentQuestionIndex];\n    const question = `Please specify the ${currentAttribute.label}.`;\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: question\n    }]);\n  };\n\n  // Summarize the responses after all questions have been answered\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModel.reportMetaModel.attributes.forEach(attribute => {\n      const userResponse = userResponses[attribute.name];\n      summary += `${attribute.label}: ${userResponse}\\n`;\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: summary\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"nK69kU/Ov5N9cpopwWLExSigpdU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","metaModel","setMetaModel","userResponses","setUserResponses","currentQuestionIndex","setCurrentQuestionIndex","fetchMetaModel","response","fetch","method","ok","data","json","console","log","prev","msg","setTimeout","askNextQuestion","Error","error","message","handleSendMessage","trim","prevMessages","currentAttribute","reportMetaModel","attributes","prevResponses","name","length","prevIndex","summarizeResponses","question","label","summary","forEach","attribute","userResponse","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  // Fetch the meta-model from the backend\r\n  const fetchMetaModel = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/meta-model', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Meta-model data:', data);  // Log the response data to check\r\n\r\n        setMetaModel(data);\r\n        setMessages(prev => [\r\n          ...prev, \r\n          { sender: \"bot\", text: data.msg }\r\n        ]);\r\n        setTimeout(() => {\r\n          askNextQuestion(data);\r\n        }, 1000); // Wait 1 second before asking the first question\r\n      } else {\r\n        throw new Error('Failed to fetch meta-model');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching meta-model:', error);\r\n      setMessages(prev => [...prev, { sender: \"bot\", text: `Error: ${error.message}` }]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Automatically fetch meta-model when component is mounted\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  // Function to handle sending user messages and responses\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      // Show user message in chat\r\n      setMessages(prevMessages => [...prevMessages, { sender: \"user\", text: input }]);\r\n\r\n      // Save the response in the userResponses state\r\n      if (metaModel) {\r\n        const currentAttribute = metaModel.reportMetaModel.attributes[currentQuestionIndex];\r\n        const response = input.trim();\r\n\r\n        setUserResponses(prevResponses => ({\r\n          ...prevResponses,\r\n          [currentAttribute.name]: response\r\n        }));\r\n      }\r\n\r\n      setInput(''); // Clear the input field\r\n\r\n      // If more questions exist, ask the next one\r\n      if (currentQuestionIndex < metaModel.reportMetaModel.attributes.length - 1) {\r\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Ask the next question based on the current question index\r\n  const askNextQuestion = (data) => {\r\n    const currentAttribute = data.reportMetaModel.attributes[currentQuestionIndex];\r\n    const question = `Please specify the ${currentAttribute.label}.`;\r\n\r\n    setMessages(prevMessages => [\r\n      ...prevMessages,\r\n      { sender: \"bot\", text: question }\r\n    ]);\r\n  };\r\n\r\n  // Summarize the responses after all questions have been answered\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModel.reportMetaModel.attributes.forEach(attribute => {\r\n      const userResponse = userResponses[attribute.name];\r\n      summary += `${attribute.label}: ${userResponse}\\n`;\r\n    });\r\n    setMessages(prevMessages => [...prevMessages, { sender: \"bot\", text: summary }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}