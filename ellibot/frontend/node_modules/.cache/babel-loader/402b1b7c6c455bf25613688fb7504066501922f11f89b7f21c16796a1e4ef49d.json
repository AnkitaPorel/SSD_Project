{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data); // Store meta-model\n\n        // Add welcome message and first question\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Please specify the ${data.data.reportMetaModel.attributes[0].label}.`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []); // Run only once on mount\n\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      const currentAttribute = metaModel === null || metaModel === void 0 ? void 0 : metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n      if (currentAttribute) {\n        setUserResponses(prev => ({\n          ...prev,\n          [currentAttribute.name]: input.trim()\n        }));\n        const nextIndex = currentQuestionIndex + 1;\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Please specify the ${nextAttribute.label}.`\n          }]);\n          setCurrentQuestionIndex(nextIndex);\n        } else {\n          summarizeResponses();\n        }\n      }\n      setInput('');\n    }\n  };\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name] || 'N/A';\n      summary += `${attr.label}: ${userResponse}\\n`;\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: summary\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"f7uf3U9LtzSyrlw4crKKkpnECzA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","currentAttribute","prev","name","nextIndex","length","nextAttribute","summarizeResponses","summary","forEach","attr","userResponse","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  \r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n        \r\n        const data = await response.json();\r\n        setMetaModel(data); // Store meta-model\r\n        \r\n        // Add welcome message and first question\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Please specify the ${data.data.reportMetaModel.attributes[0].label}.` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []); // Run only once on mount\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      const currentAttribute = metaModel?.data.reportMetaModel.attributes[currentQuestionIndex];\r\n      if (currentAttribute) {\r\n        setUserResponses((prev) => ({\r\n          ...prev,\r\n          [currentAttribute.name]: input.trim(),\r\n        }));\r\n\r\n        const nextIndex = currentQuestionIndex + 1;\r\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Please specify the ${nextAttribute.label}.` },\r\n          ]);\r\n          setCurrentQuestionIndex(nextIndex);\r\n        } else {\r\n          summarizeResponses();\r\n        }\r\n      }\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name] || 'N/A';\r\n      summary += `${attr.label}: ${userResponse}\\n`;\r\n    });\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: summary },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}