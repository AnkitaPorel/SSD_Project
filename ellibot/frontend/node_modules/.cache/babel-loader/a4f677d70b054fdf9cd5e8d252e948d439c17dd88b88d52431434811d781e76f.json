{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Let’s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      const isValid = isValidEnglishPhrase(input.trim());\n      if (isValid) {\n        const validationResponse = await validateResponse(input.trim());\n        if (validationResponse.isValid) {\n          handleMetaModelQuestions();\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: validationResponse.message\n          }]);\n        }\n      } else {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: \"Sorry, your response doesn't seem valid. Please use proper English phrases.\"\n        }]);\n      }\n      setInput('');\n    }\n  };\n\n  // Simple local validation in the frontend\n  const isValidEnglishPhrase = text => {\n    const regex = /^[A-Za-z0-9,.!?'\" ]+$/; // Allow letters, numbers, punctuation, and spaces\n    return regex.test(text) && text.trim().length > 0;\n  };\n\n  // Validate response using backend API\n  const validateResponse = async response => {\n    try {\n      const res = await fetch('http://localhost:5001/api/validate-response', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          response\n        })\n      });\n      const data = await res.json();\n      return data;\n    } catch (error) {\n      console.error('Error during validation:', error);\n      return {\n        isValid: false,\n        message: 'Failed to validate the response.'\n      };\n    }\n  };\n  const handleMetaModelQuestions = async () => {\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      setUserResponses(prev => ({\n        ...prev,\n        [currentAttribute.name]: input.trim()\n      }));\n\n      // Validate the user response via API\n      const validationResponse = await validateResponse(input.trim(), currentAttribute);\n      if (validationResponse.isValid) {\n        const nextIndex = currentQuestionIndex + 1;\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n          const variedQuestions = [`Can you please provide the ${nextAttribute.label}?`, `I need to know the ${nextAttribute.label}. Could you share it?`, `Next, could you specify the ${nextAttribute.label}?`];\n          const randomQuestion = variedQuestions[Math.floor(Math.random() * variedQuestions.length)];\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: randomQuestion\n          }]);\n          setCurrentQuestionIndex(nextIndex);\n        } else {\n          summarizeResponses();\n        }\n      } else {\n        // Provide more detailed feedback when validation fails\n        const feedback = validationResponse.suggestion || 'Your input could not be validated. Please try again.';\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Sorry, the response for ${currentAttribute.label} is not quite clear. Could you please clarify?`\n        }, {\n          sender: 'bot',\n          text: `Here’s why: ${feedback}`\n        }]);\n      }\n    }\n  };\n  const summarizeResponses = () => {\n    let summary = 'Here is a quick summary of what you’ve shared:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name] || 'N/A';\n      summary += `${attr.label}: ${userResponse}\\n`;\n    });\n    const variedSummaryMessages = [\"Here's what we have so far:\", \"Here’s a recap of your responses:\", \"This is the information you've provided:\"];\n    const summaryIntro = variedSummaryMessages[Math.floor(Math.random() * variedSummaryMessages.length)];\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: summaryIntro\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n  };\n  const handleDefaultQuestionResponse = () => {\n    const variedFinalMessages = [\"Thank you for your input! Let me know if you'd like to revisit anything.\", \"Got it! If there's nothing else, have a great day!\", \"Thanks for sharing! If you need further assistance, just let me know.\"];\n    const finalMessage = variedFinalMessages[Math.floor(Math.random() * variedFinalMessages.length)];\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: finalMessage\n    }]);\n    setIsDefaultQuestionAsked(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"k0ssCoBkraGqSmS2/GckhEuzHpk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","defaultQuestion","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","isValid","isValidEnglishPhrase","validationResponse","validateResponse","handleMetaModelQuestions","regex","test","length","res","method","headers","body","JSON","stringify","currentAttribute","prev","name","nextIndex","nextAttribute","variedQuestions","randomQuestion","Math","floor","random","summarizeResponses","feedback","suggestion","summary","forEach","attr","userResponse","variedSummaryMessages","summaryIntro","handleDefaultQuestionResponse","variedFinalMessages","finalMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n        \r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n        \r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Let’s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n  \r\n      const isValid = isValidEnglishPhrase(input.trim());\r\n      if (isValid) {\r\n        const validationResponse = await validateResponse(input.trim());\r\n        if (validationResponse.isValid) {\r\n          handleMetaModelQuestions();\r\n        } else {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: validationResponse.message },\r\n          ]);\r\n        }\r\n      } else {\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: \"Sorry, your response doesn't seem valid. Please use proper English phrases.\",\r\n          },\r\n        ]);\r\n      }\r\n  \r\n      setInput('');\r\n    }\r\n  };\r\n  \r\n  // Simple local validation in the frontend\r\n  const isValidEnglishPhrase = (text) => {\r\n    const regex = /^[A-Za-z0-9,.!?'\" ]+$/; // Allow letters, numbers, punctuation, and spaces\r\n    return regex.test(text) && text.trim().length > 0;\r\n  };\r\n  \r\n  // Validate response using backend API\r\n  const validateResponse = async (response) => {\r\n    try {\r\n      const res = await fetch('http://localhost:5001/api/validate-response', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ response }),\r\n      });\r\n      const data = await res.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error during validation:', error);\r\n      return { isValid: false, message: 'Failed to validate the response.' };\r\n    }\r\n  };  \r\n\r\n  const handleMetaModelQuestions = async () => {\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n    if (currentAttribute) {\r\n        setUserResponses((prev) => ({\r\n            ...prev,\r\n            [currentAttribute.name]: input.trim(),\r\n        }));\r\n\r\n        // Validate the user response via API\r\n        const validationResponse = await validateResponse(input.trim(), currentAttribute);\r\n\r\n        if (validationResponse.isValid) {\r\n            const nextIndex = currentQuestionIndex + 1;\r\n            if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n                const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n                const variedQuestions = [\r\n                    `Can you please provide the ${nextAttribute.label}?`,\r\n                    `I need to know the ${nextAttribute.label}. Could you share it?`,\r\n                    `Next, could you specify the ${nextAttribute.label}?`,\r\n                ];\r\n                const randomQuestion = variedQuestions[Math.floor(Math.random() * variedQuestions.length)];\r\n\r\n                setMessages((prevMessages) => [\r\n                    ...prevMessages,\r\n                    { sender: 'bot', text: randomQuestion },\r\n                ]);\r\n                setCurrentQuestionIndex(nextIndex);\r\n            } else {\r\n                summarizeResponses();\r\n            }\r\n        } else {\r\n            // Provide more detailed feedback when validation fails\r\n            const feedback = validationResponse.suggestion || 'Your input could not be validated. Please try again.';\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                { sender: 'bot', text: `Sorry, the response for ${currentAttribute.label} is not quite clear. Could you please clarify?` },\r\n                { sender: 'bot', text: `Here’s why: ${feedback}` },\r\n            ]);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is a quick summary of what you’ve shared:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name] || 'N/A';\r\n      summary += `${attr.label}: ${userResponse}\\n`;\r\n    });\r\n\r\n    const variedSummaryMessages = [\r\n      \"Here's what we have so far:\",\r\n      \"Here’s a recap of your responses:\",\r\n      \"This is the information you've provided:\",\r\n    ];\r\n    const summaryIntro = variedSummaryMessages[Math.floor(Math.random() * variedSummaryMessages.length)];\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: summaryIntro },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n\r\n    setIsDefaultQuestionAsked(true);\r\n  };\r\n\r\n  const handleDefaultQuestionResponse = () => {\r\n    const variedFinalMessages = [\r\n      \"Thank you for your input! Let me know if you'd like to revisit anything.\",\r\n      \"Got it! If there's nothing else, have a great day!\",\r\n      \"Thanks for sharing! If you need further assistance, just let me know.\",\r\n    ];\r\n    const finalMessage = variedFinalMessages[Math.floor(Math.random() * variedFinalMessages.length)];\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: finalMessage },\r\n    ]);\r\n    setIsDefaultQuestionAsked(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}