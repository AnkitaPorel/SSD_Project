{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [hasWelcomeMessageBeenSent, setHasWelcomeMessageBeenSent] = useState(false); // Track welcome message\n\n  useEffect(() => {\n    // Fetch meta-model once when the component is mounted\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model', {\n          method: 'GET'\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setMetaModel(data); // Set the fetched meta-model data\n\n          // Display the welcome message only once\n          if (!hasWelcomeMessageBeenSent) {\n            setMessages(prevMessages => [...prevMessages, {\n              sender: 'bot',\n              text: data.msg || 'Welcome to the chat!'\n            }]);\n            setHasWelcomeMessageBeenSent(true); // Mark the welcome message as sent\n          }\n        } else {\n          throw new Error('Failed to fetch meta-model');\n        }\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n\n    // Only fetch if metaModel hasn't been set yet\n    if (!metaModel) {\n      fetchMetaModel();\n    }\n  }, [metaModel, hasWelcomeMessageBeenSent]); // Prevent re-fetching\n\n  useEffect(() => {\n    // Ask the first question only after the meta-model is loaded\n    if (metaModel && currentQuestionIndex === 0 && !hasWelcomeMessageBeenSent) {\n      const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n      const question = `Please specify the ${currentAttribute.label}.`;\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: question\n      }]);\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\n    }\n  }, [metaModel, currentQuestionIndex, hasWelcomeMessageBeenSent]);\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"user\",\n        text: input\n      }]);\n      setInput(''); // Clear input after sending\n\n      if (metaModel && currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length) {\n        // Save the user response to the current question\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex - 1]; // Use previous question index\n        setUserResponses(prevResponses => ({\n          ...prevResponses,\n          [currentAttribute.name]: input.trim()\n        }));\n\n        // Ask the next question if there are more questions\n        const nextAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n        if (nextAttribute) {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Please specify the ${nextAttribute.label}.`\n          }]);\n          setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\n        } else {\n          // If no more questions, summarize the responses\n          summarizeResponses();\n        }\n      }\n    }\n  };\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\n      const userResponse = userResponses[attribute.name];\n      summary += `${attribute.label}: ${userResponse}\\n`;\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: summary\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"nzriR5OX1+jBUZ7GVtrqF8j2O00=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","hasWelcomeMessageBeenSent","setHasWelcomeMessageBeenSent","fetchMetaModel","response","fetch","method","ok","data","json","prevMessages","sender","text","msg","Error","error","console","message","currentAttribute","reportMetaModel","attributes","question","label","prevIndex","handleSendMessage","trim","length","prevResponses","name","nextAttribute","summarizeResponses","summary","forEach","attribute","userResponse","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [hasWelcomeMessageBeenSent, setHasWelcomeMessageBeenSent] = useState(false); // Track welcome message\r\n\r\n  useEffect(() => {\r\n    // Fetch meta-model once when the component is mounted\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model', {\r\n          method: 'GET',\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setMetaModel(data);  // Set the fetched meta-model data\r\n\r\n          // Display the welcome message only once\r\n          if (!hasWelcomeMessageBeenSent) {\r\n            setMessages(prevMessages => [\r\n              ...prevMessages,\r\n              { sender: 'bot', text: data.msg || 'Welcome to the chat!' }\r\n            ]);\r\n            setHasWelcomeMessageBeenSent(true); // Mark the welcome message as sent\r\n          }\r\n        } else {\r\n          throw new Error('Failed to fetch meta-model');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages(prevMessages => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: `Error: ${error.message}` }\r\n        ]);\r\n      }\r\n    };\r\n\r\n    // Only fetch if metaModel hasn't been set yet\r\n    if (!metaModel) {\r\n      fetchMetaModel();\r\n    }\r\n  }, [metaModel, hasWelcomeMessageBeenSent]); // Prevent re-fetching\r\n\r\n  useEffect(() => {\r\n    // Ask the first question only after the meta-model is loaded\r\n    if (metaModel && currentQuestionIndex === 0 && !hasWelcomeMessageBeenSent) {\r\n      const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n      const question = `Please specify the ${currentAttribute.label}.`;\r\n\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: question }\r\n      ]);\r\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\r\n    }\r\n  }, [metaModel, currentQuestionIndex, hasWelcomeMessageBeenSent]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages(prevMessages => [...prevMessages, { sender: \"user\", text: input }]);\r\n      setInput(''); // Clear input after sending\r\n\r\n      if (metaModel && currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n        // Save the user response to the current question\r\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex - 1]; // Use previous question index\r\n        setUserResponses(prevResponses => ({\r\n          ...prevResponses,\r\n          [currentAttribute.name]: input.trim()\r\n        }));\r\n\r\n        // Ask the next question if there are more questions\r\n        const nextAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n        if (nextAttribute) {\r\n          setMessages(prevMessages => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Please specify the ${nextAttribute.label}.` }\r\n          ]);\r\n          setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\r\n        } else {\r\n          // If no more questions, summarize the responses\r\n          summarizeResponses();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\r\n      const userResponse = userResponses[attribute.name];\r\n      summary += `${attribute.label}: ${userResponse}\\n`;\r\n    });\r\n    setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: summary }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}