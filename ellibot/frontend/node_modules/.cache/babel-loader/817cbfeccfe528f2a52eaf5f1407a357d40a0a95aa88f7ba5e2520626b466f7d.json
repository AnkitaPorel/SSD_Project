{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  // Sample metaModel structure received from the backend\n  const metaModelData = metaModel ? metaModel.reportMetaModel.attributes : [];\n\n  // Function to fetch meta-model data\n  const fetchMetaModel = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/meta-model', {\n        method: 'GET'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setMetaModel(data);\n      } else {\n        throw new Error('Failed to fetch meta-model');\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: `Error: ${error.message}`\n      }]);\n    }\n  };\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      const currentAttribute = metaModelData[currentQuestionIndex];\n      const response = input.trim();\n\n      // Save response\n      setUserResponses(prevResponses => ({\n        ...prevResponses,\n        [currentAttribute.name]: response\n      }));\n      setMessages([...messages, {\n        sender: \"user\",\n        text: input\n      }]);\n      setInput('');\n\n      // If we have reached the end of the questions, summarize and finish\n      if (currentQuestionIndex < metaModelData.length - 1) {\n        // Move to next question\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n      } else {\n        // Provide a summary\n        summarizeResponses();\n      }\n    }\n  };\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModelData.forEach(attribute => {\n      const userResponse = userResponses[attribute.name];\n      summary += `${attribute.label}: ${userResponse}\\n`;\n    });\n    setMessages(prev => [...prev, {\n      sender: \"bot\",\n      text: summary\n    }]);\n  };\n\n  // Function to generate the question based on the meta-model\n  const generateQuestion = attribute => {\n    let question = `Please specify the ${attribute.label}. `;\n    if (attribute.description) {\n      question += `${attribute.description} `;\n    }\n    if (attribute.options && attribute.options.length > 0) {\n      question += `You can choose from: ${attribute.options.join(', ')}. `;\n    }\n    question += `For example: ${attribute.example}.`;\n    return question;\n  };\n\n  // Start fetching meta-model on load\n  React.useEffect(() => {\n    fetchMetaModel();\n  }, []);\n\n  // Display the current question\n  const currentAttribute = metaModelData[currentQuestionIndex];\n  const questionText = currentAttribute ? generateQuestion(currentAttribute) : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), currentAttribute && !userResponses[currentAttribute.name] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-message bot\",\n        children: questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"nK69kU/Ov5N9cpopwWLExSigpdU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","metaModel","setMetaModel","userResponses","setUserResponses","currentQuestionIndex","setCurrentQuestionIndex","metaModelData","reportMetaModel","attributes","fetchMetaModel","response","fetch","method","ok","data","json","Error","error","prev","message","handleSendMessage","trim","currentAttribute","prevResponses","name","length","summarizeResponses","summary","forEach","attribute","userResponse","label","generateQuestion","question","description","options","join","example","useEffect","questionText","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  // Sample metaModel structure received from the backend\r\n  const metaModelData = metaModel ? metaModel.reportMetaModel.attributes : [];\r\n\r\n  // Function to fetch meta-model data\r\n  const fetchMetaModel = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/meta-model', {\r\n        method: 'GET',\r\n      });\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n      } else {\r\n        throw new Error('Failed to fetch meta-model');\r\n      }\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, { sender: \"bot\", text: `Error: ${error.message}` }]);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      const currentAttribute = metaModelData[currentQuestionIndex];\r\n      const response = input.trim();\r\n      \r\n      // Save response\r\n      setUserResponses(prevResponses => ({\r\n        ...prevResponses,\r\n        [currentAttribute.name]: response\r\n      }));\r\n\r\n      setMessages([...messages, { sender: \"user\", text: input }]);\r\n      setInput('');\r\n\r\n      // If we have reached the end of the questions, summarize and finish\r\n      if (currentQuestionIndex < metaModelData.length - 1) {\r\n        // Move to next question\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      } else {\r\n        // Provide a summary\r\n        summarizeResponses();\r\n      }\r\n    }\r\n  };\r\n\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModelData.forEach(attribute => {\r\n      const userResponse = userResponses[attribute.name];\r\n      summary += `${attribute.label}: ${userResponse}\\n`;\r\n    });\r\n    setMessages(prev => [...prev, { sender: \"bot\", text: summary }]);\r\n  };\r\n\r\n  // Function to generate the question based on the meta-model\r\n  const generateQuestion = (attribute) => {\r\n    let question = `Please specify the ${attribute.label}. `;\r\n    if (attribute.description) {\r\n      question += `${attribute.description} `;\r\n    }\r\n    if (attribute.options && attribute.options.length > 0) {\r\n      question += `You can choose from: ${attribute.options.join(', ')}. `;\r\n    }\r\n    question += `For example: ${attribute.example}.`;\r\n    return question;\r\n  };\r\n\r\n  // Start fetching meta-model on load\r\n  React.useEffect(() => {\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  // Display the current question\r\n  const currentAttribute = metaModelData[currentQuestionIndex];\r\n  const questionText = currentAttribute ? generateQuestion(currentAttribute) : '';\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {currentAttribute && !userResponses[currentAttribute.name] && (\r\n          <div className=\"chatbot-message bot\">\r\n            {questionText}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}