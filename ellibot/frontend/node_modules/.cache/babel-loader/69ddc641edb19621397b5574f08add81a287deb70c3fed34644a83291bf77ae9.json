{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(input.trim());\n      } else {\n        handleMetaModelQuestions();\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = () => {\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\n        if (nestedAttribute) {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Could you please specify the ${nestedAttribute.label}?`\n          }]);\n          setUserResponses(prev => ({\n            ...prev,\n            [currentAttribute.name]: {\n              ...prev[currentAttribute.name],\n              [nestedAttribute.name]: input.trim()\n            }\n          }));\n        } else {\n          setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n          if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\n            handleMetaModelQuestions();\n          } else {\n            summarizeResponses();\n          }\n        }\n      } else {\n        setUserResponses(prev => ({\n          ...prev,\n          [currentAttribute.name]: input.trim()\n        }));\n        const nextIndex = currentQuestionIndex + 1;\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Can you please provide the ${nextAttribute.label}?`\n          }]);\n          setCurrentQuestionIndex(nextIndex);\n        } else {\n          summarizeResponses();\n        }\n      }\n    }\n  };\n  const summarizeResponses = async () => {\n    let summary = [];\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        const nestedSummary = {\n          label: attr.label,\n          details: attr.attributes.map(nestedAttr => ({\n            label: nestedAttr.label,\n            response: (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A'\n          }))\n        };\n        summary.push(nestedSummary);\n      } else {\n        summary.push({\n          label: attr.label,\n          response: userResponse || 'N/A'\n        });\n      }\n    });\n    const displaySummary = summary.map(item => {\n      if (item.details) {\n        const nestedDetails = item.details.map(nestedItem => `   - ${nestedItem.label}: ${nestedItem.response}`).join('\\n');\n        return `${item.label}:\\n${nestedDetails}`;\n      } else {\n        return `${item.label}: ${item.response}`;\n      }\n    }).join('\\n');\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: \"Here's what we have so far:\"\n    }, {\n      sender: 'bot',\n      text: displaySummary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n    const apiSummary = {\n      userId: 'guest',\n      summary: summary\n    };\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: 'guest'\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving responses:', error);\n    }\n    try {\n      const response = await fetch('http://localhost:5001/api/save-summary', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(apiSummary)\n      });\n      if (!response.ok) {\n        console.error('Error saving summary:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving summary:', error);\n    }\n  };\n  const handleDefaultQuestion = response => {\n    const lowercasedResponse = response.toLowerCase();\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!'\n      }]);\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"k0ssCoBkraGqSmS2/GckhEuzHpk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","defaultQuestion","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestion","handleMetaModelQuestions","currentAttribute","type","nestedAttrIndex","Object","keys","name","length","nestedAttribute","prev","prevIndex","summarizeResponses","nextIndex","nextAttribute","summary","forEach","attr","userResponse","nestedSummary","details","map","nestedAttr","push","displaySummary","item","nestedDetails","nestedItem","join","apiSummary","userId","method","headers","body","JSON","stringify","lowercasedResponse","toLowerCase","className","children","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(input.trim());\r\n      } else {\r\n        handleMetaModelQuestions();\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = () => {\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n  \r\n    if (currentAttribute) {\r\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\r\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\r\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\r\n  \r\n        if (nestedAttribute) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Could you please specify the ${nestedAttribute.label}?` },\r\n          ]);\r\n\r\n          setUserResponses((prev) => ({\r\n            ...prev,\r\n            [currentAttribute.name]: {\r\n              ...prev[currentAttribute.name],\r\n              [nestedAttribute.name]: input.trim(),\r\n            },\r\n          }));\r\n        } else {\r\n          setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n          if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\r\n            handleMetaModelQuestions();\r\n          } else {\r\n            summarizeResponses();\r\n          }\r\n        }\r\n      } else {\r\n        setUserResponses((prev) => ({\r\n          ...prev,\r\n          [currentAttribute.name]: input.trim(),\r\n        }));\r\n  \r\n        const nextIndex = currentQuestionIndex + 1;\r\n  \r\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Can you please provide the ${nextAttribute.label}?` },\r\n          ]);\r\n          setCurrentQuestionIndex(nextIndex);\r\n        } else {\r\n          summarizeResponses();\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  const summarizeResponses = async () => {\r\n    let summary = [];\r\n\r\n  metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n    const userResponse = userResponses[attr.name];\r\n    if (attr.type === 'object' && attr.attributes) {\r\n      const nestedSummary = {\r\n        label: attr.label,\r\n        details: attr.attributes.map((nestedAttr) => ({\r\n          label: nestedAttr.label,\r\n          response: userResponse?.[nestedAttr.name] || 'N/A',\r\n        })),\r\n      };\r\n      summary.push(nestedSummary);\r\n    } else {\r\n      summary.push({\r\n        label: attr.label,\r\n        response: userResponse || 'N/A',\r\n      });\r\n    }\r\n  });\r\n\r\n  const displaySummary = summary\r\n    .map((item) => {\r\n      if (item.details) {\r\n        const nestedDetails = item.details\r\n          .map((nestedItem) => `   - ${nestedItem.label}: ${nestedItem.response}`)\r\n          .join('\\n');\r\n        return `${item.label}:\\n${nestedDetails}`;\r\n      } else {\r\n        return `${item.label}: ${item.response}`;\r\n      }\r\n    })\r\n    .join('\\n');\r\n  \r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: \"Here's what we have so far:\" },\r\n      { sender: 'bot', text: displaySummary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n  \r\n    setIsDefaultQuestionAsked(true);\r\n\r\n    const apiSummary = {\r\n      userId: 'guest',\r\n      summary: summary,\r\n    };\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userResponses, userId: 'guest' }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving responses:', error);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-summary', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(apiSummary),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        console.error('Error saving summary:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving summary:', error);\r\n    }\r\n  };\r\n  \r\n  const handleDefaultQuestion = (response) => {\r\n    const lowercasedResponse = response.toLowerCase();\r\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}