{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  // Fetch the meta-model from the backend\n  const fetchMetaModel = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/meta-model', {\n        method: 'GET'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Meta-model data:', data); // Log the response data to check\n\n        // Access the nested 'data.reportMetaModel' correctly\n        if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\n          setMetaModel(data);\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: data.msg || \"Welcome to the chat!\"\n          }]);\n\n          // Ask the first question after a short delay\n          setTimeout(() => {\n            askNextQuestion(data);\n          }, 1000);\n        } else {\n          throw new Error('Meta-model structure is invalid');\n        }\n      } else {\n        throw new Error('Failed to fetch meta-model');\n      }\n    } catch (error) {\n      console.error('Error fetching meta-model:', error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: `Error: ${error.message}`\n      }]);\n    }\n  };\n  useEffect(() => {\n    // Automatically fetch meta-model when component is mounted\n    fetchMetaModel();\n  }, []);\n\n  // Function to handle sending user messages and responses\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      // Show user message in chat\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"user\",\n        text: input\n      }]);\n\n      // Save the response in the userResponses state\n      if (metaModel) {\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n        const response = input.trim();\n        setUserResponses(prevResponses => ({\n          ...prevResponses,\n          [currentAttribute.name]: response\n        }));\n      }\n      setInput(''); // Clear the input field\n\n      // If more questions exist, ask the next one\n      if (currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length - 1) {\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\n      } else {\n        summarizeResponses();\n      }\n    }\n  };\n\n  // Ask the next question based on the current question index\n  const askNextQuestion = data => {\n    if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\n      const currentAttribute = data.data.reportMetaModel.attributes[currentQuestionIndex];\n      const question = `Please specify the ${currentAttribute.label}.`;\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: question\n      }]);\n    }\n  };\n\n  // Summarize the responses after all questions have been answered\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\n      const userResponse = userResponses[attribute.name];\n      summary += `${attribute.label}: ${userResponse}\\n`;\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: summary\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"nK69kU/Ov5N9cpopwWLExSigpdU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","metaModel","setMetaModel","userResponses","setUserResponses","currentQuestionIndex","setCurrentQuestionIndex","fetchMetaModel","response","fetch","method","ok","data","json","console","log","reportMetaModel","attributes","prev","msg","setTimeout","askNextQuestion","Error","error","message","handleSendMessage","trim","prevMessages","currentAttribute","prevResponses","name","length","prevIndex","summarizeResponses","question","label","summary","forEach","attribute","userResponse","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  // Fetch the meta-model from the backend\r\n  const fetchMetaModel = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/meta-model', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Meta-model data:', data);  // Log the response data to check\r\n\r\n        // Access the nested 'data.reportMetaModel' correctly\r\n        if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\r\n          setMetaModel(data);\r\n          setMessages(prev => [\r\n            ...prev, \r\n            { sender: \"bot\", text: data.msg || \"Welcome to the chat!\" }\r\n          ]);\r\n\r\n          // Ask the first question after a short delay\r\n          setTimeout(() => {\r\n            askNextQuestion(data);\r\n          }, 1000);\r\n        } else {\r\n          throw new Error('Meta-model structure is invalid');\r\n        }\r\n      } else {\r\n        throw new Error('Failed to fetch meta-model');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching meta-model:', error);\r\n      setMessages(prev => [...prev, { sender: \"bot\", text: `Error: ${error.message}` }]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Automatically fetch meta-model when component is mounted\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  // Function to handle sending user messages and responses\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      // Show user message in chat\r\n      setMessages(prevMessages => [...prevMessages, { sender: \"user\", text: input }]);\r\n\r\n      // Save the response in the userResponses state\r\n      if (metaModel) {\r\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n        const response = input.trim();\r\n\r\n        setUserResponses(prevResponses => ({\r\n          ...prevResponses,\r\n          [currentAttribute.name]: response\r\n        }));\r\n      }\r\n\r\n      setInput(''); // Clear the input field\r\n\r\n      // If more questions exist, ask the next one\r\n      if (currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length - 1) {\r\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Ask the next question based on the current question index\r\n  const askNextQuestion = (data) => {\r\n    if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\r\n      const currentAttribute = data.data.reportMetaModel.attributes[currentQuestionIndex];\r\n      const question = `Please specify the ${currentAttribute.label}.`;\r\n\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", text: question }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Summarize the responses after all questions have been answered\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\r\n      const userResponse = userResponses[attribute.name];\r\n      summary += `${attribute.label}: ${userResponse}\\n`;\r\n    });\r\n    setMessages(prevMessages => [...prevMessages, { sender: \"bot\", text: summary }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}