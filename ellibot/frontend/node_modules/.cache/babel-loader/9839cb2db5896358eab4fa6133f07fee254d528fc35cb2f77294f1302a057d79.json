{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [isFetching, setIsFetching] = useState(false);\n\n  // Fetch the meta-model only once when the component mounts\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      if (isFetching) return; // Prevent fetch if already fetching\n      setIsFetching(true);\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model', {\n          method: 'GET'\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Meta-model data:', data); // Log the response data to check\n\n          // Access the nested 'data.reportMetaModel' correctly\n          if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\n            setMetaModel(data);\n            setMessages(prev => [...prev, {\n              sender: \"bot\",\n              text: data.msg || \"Welcome to the chat!\"\n            }]);\n            // Ask the first question after a short delay\n            setTimeout(() => {\n              askNextQuestion(data);\n            }, 1000);\n          } else {\n            throw new Error('Meta-model structure is invalid');\n          }\n        } else {\n          throw new Error('Failed to fetch meta-model');\n        }\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: `Error: ${error.message}`\n        }]);\n      } finally {\n        setIsFetching(false); // Reset fetching status\n      }\n    };\n    fetchMetaModel(); // Fetch the meta-model once when the component mounts\n  }, [isFetching]); // Depend on isFetching to control the flow\n\n  const askNextQuestion = data => {\n    if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\n      const currentAttribute = data.data.reportMetaModel.attributes[currentQuestionIndex];\n      const question = `Please specify the ${currentAttribute.label}.`;\n\n      // Prevent asking the same question again if already asked\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        text: question\n      }]);\n    }\n  };\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"user\",\n        text: input\n      }]);\n\n      // Save the response in the userResponses state\n      if (metaModel) {\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n        const response = input.trim();\n        setUserResponses(prevResponses => ({\n          ...prevResponses,\n          [currentAttribute.name]: response\n        }));\n      }\n      setInput(''); // Clear the input field\n\n      // If more questions exist, ask the next one\n      if (currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length - 1) {\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\n      } else {\n        summarizeResponses();\n      }\n    }\n  };\n\n  // Summarize the responses after all questions have been answered\n  const summarizeResponses = () => {\n    let summary = 'Here is the summary of your responses:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\n      const userResponse = userResponses[attribute.name];\n      summary += `${attribute.label}: ${userResponse}\\n`;\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: summary\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"DFn7YSBU00lYg3LGh3rLeTm9xIE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","metaModel","setMetaModel","userResponses","setUserResponses","currentQuestionIndex","setCurrentQuestionIndex","isFetching","setIsFetching","fetchMetaModel","response","fetch","method","ok","data","json","console","log","reportMetaModel","attributes","prev","msg","setTimeout","askNextQuestion","Error","error","message","currentAttribute","question","label","prevMessages","handleSendMessage","trim","prevResponses","name","length","prevIndex","summarizeResponses","summary","forEach","attribute","userResponse","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n\r\n  // Fetch the meta-model only once when the component mounts\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      if (isFetching) return;  // Prevent fetch if already fetching\r\n      setIsFetching(true);\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model', { method: 'GET' });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log('Meta-model data:', data);  // Log the response data to check\r\n\r\n          // Access the nested 'data.reportMetaModel' correctly\r\n          if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\r\n            setMetaModel(data);\r\n            setMessages(prev => [\r\n              ...prev, \r\n              { sender: \"bot\", text: data.msg || \"Welcome to the chat!\" }\r\n            ]);\r\n            // Ask the first question after a short delay\r\n            setTimeout(() => {\r\n              askNextQuestion(data);\r\n            }, 1000);\r\n          } else {\r\n            throw new Error('Meta-model structure is invalid');\r\n          }\r\n        } else {\r\n          throw new Error('Failed to fetch meta-model');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages(prev => [...prev, { sender: \"bot\", text: `Error: ${error.message}` }]);\r\n      } finally {\r\n        setIsFetching(false);  // Reset fetching status\r\n      }\r\n    };\r\n\r\n    fetchMetaModel(); // Fetch the meta-model once when the component mounts\r\n  }, [isFetching]); // Depend on isFetching to control the flow\r\n\r\n  const askNextQuestion = (data) => {\r\n    if (data && data.data && data.data.reportMetaModel && data.data.reportMetaModel.attributes) {\r\n      const currentAttribute = data.data.reportMetaModel.attributes[currentQuestionIndex];\r\n      const question = `Please specify the ${currentAttribute.label}.`;\r\n\r\n      // Prevent asking the same question again if already asked\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", text: question }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages(prevMessages => [...prevMessages, { sender: \"user\", text: input }]);\r\n\r\n      // Save the response in the userResponses state\r\n      if (metaModel) {\r\n        const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n        const response = input.trim();\r\n        setUserResponses(prevResponses => ({\r\n          ...prevResponses,\r\n          [currentAttribute.name]: response\r\n        }));\r\n      }\r\n\r\n      setInput(''); // Clear the input field\r\n\r\n      // If more questions exist, ask the next one\r\n      if (currentQuestionIndex < metaModel.data.reportMetaModel.attributes.length - 1) {\r\n        setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n        setTimeout(() => askNextQuestion(metaModel), 1000); // Wait for the next question\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Summarize the responses after all questions have been answered\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is the summary of your responses:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach(attribute => {\r\n      const userResponse = userResponses[attribute.name];\r\n      summary += `${attribute.label}: ${userResponse}\\n`;\r\n    });\r\n    setMessages(prevMessages => [...prevMessages, { sender: \"bot\", text: summary }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}