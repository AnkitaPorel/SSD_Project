{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElicitationTool = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Welcome to the elicitation tool! Let's begin.\"\n  }]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [metaModel, setMetaModel] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [input, setInput] = useState('');\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const generateQuestion = attribute => {\n    if (attribute.type === 'string') {\n      return `What is the ${attribute.label.toLowerCase()}?`;\n    }\n    if (attribute.type === 'array' && attribute.options) {\n      return `Please choose an option for ${attribute.label.toLowerCase()}: ${attribute.options.join(', ')}.`;\n    }\n    if (attribute.type === 'array' && !attribute.options) {\n      return `List the ${attribute.label.toLowerCase()} (e.g., ${attribute.example || 'example data'}).`;\n    }\n    if (attribute.type === 'object' && attribute.attributes) {\n      return `Provide details for ${attribute.label.toLowerCase()}.`;\n    }\n    return `Can you provide information about ${attribute.label.toLowerCase()}?`;\n  };\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('/api/fetch-meta-model');\n        const data = await response.json();\n        setMetaModel(data.attributes);\n        setCurrentQuestion(data.attributes[0]);\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: generateQuestion(data.attributes[0])\n        }]);\n      } catch (err) {\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: \"Failed to fetch the meta-model. Please try again later.\"\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      const updatedResponses = {\n        ...responses,\n        [currentQuestion.name]: input\n      };\n      setResponses(updatedResponses);\n      setMessages(prev => [...prev, {\n        sender: \"user\",\n        text: input\n      }]);\n      setInput('');\n      if (questionIndex + 1 < metaModel.length) {\n        const nextQuestion = metaModel[questionIndex + 1];\n        setTimeout(() => {\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: `${nextQuestion.label}: ${nextQuestion.description}`\n          }]);\n          setCurrentQuestion(nextQuestion);\n          setQuestionIndex(questionIndex + 1);\n        }, 1000);\n      } else {\n        setTimeout(() => {\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Thanks for your responses! Submitting them now.\"\n          }]);\n          submitResponses(updatedResponses);\n        }, 1000);\n      }\n    }\n  };\n  const submitResponses = async responses => {\n    try {\n      const response = await fetch('/api/submit-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(responses)\n      });\n      const data = await response.json();\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"Your responses have been saved. Thank you!\"\n      }]);\n    } catch (err) {\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"Failed to save responses. Please try again later.\"\n      }]);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: `Type your message...`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(ElicitationTool, \"Dg8xkT04lnzZFfZaUiu2YMytPxA=\");\n_c = ElicitationTool;\nexport default ElicitationTool;\nvar _c;\n$RefreshReg$(_c, \"ElicitationTool\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ElicitationTool","_s","messages","setMessages","sender","text","currentQuestion","setCurrentQuestion","metaModel","setMetaModel","responses","setResponses","input","setInput","questionIndex","setQuestionIndex","generateQuestion","attribute","type","label","toLowerCase","options","join","example","attributes","fetchMetaModel","response","fetch","data","json","prev","err","handleSendMessage","trim","updatedResponses","name","length","nextQuestion","setTimeout","description","submitResponses","method","headers","body","JSON","stringify","handleKeyPress","e","key","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst ElicitationTool = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Welcome to the elicitation tool! Let's begin.\" }\r\n  ]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [responses, setResponses] = useState({});\r\n  const [input, setInput] = useState('');\r\n  const [questionIndex, setQuestionIndex] = useState(0);\r\n\r\n  const generateQuestion = (attribute) => {\r\n    if (attribute.type === 'string') {\r\n      return `What is the ${attribute.label.toLowerCase()}?`;\r\n    }\r\n    if (attribute.type === 'array' && attribute.options) {\r\n      return `Please choose an option for ${attribute.label.toLowerCase()}: ${attribute.options.join(', ')}.`;\r\n    }\r\n    if (attribute.type === 'array' && !attribute.options) {\r\n      return `List the ${attribute.label.toLowerCase()} (e.g., ${attribute.example || 'example data'}).`;\r\n    }\r\n    if (attribute.type === 'object' && attribute.attributes) {\r\n      return `Provide details for ${attribute.label.toLowerCase()}.`;\r\n    }\r\n    return `Can you provide information about ${attribute.label.toLowerCase()}?`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('/api/fetch-meta-model');\r\n        const data = await response.json();\r\n        setMetaModel(data.attributes);\r\n        setCurrentQuestion(data.attributes[0]);\r\n        setMessages(prev => [\r\n          ...prev,\r\n          { sender: \"bot\", text: generateQuestion(data.attributes[0]) }\r\n        ]);\r\n      } catch (err) {\r\n        setMessages(prev => [\r\n          ...prev,\r\n          { sender: \"bot\", text: \"Failed to fetch the meta-model. Please try again later.\" }\r\n        ]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      const updatedResponses = { ...responses, [currentQuestion.name]: input };\r\n      setResponses(updatedResponses);\r\n\r\n      setMessages(prev => [...prev, { sender: \"user\", text: input }]);\r\n\r\n      setInput('');\r\n\r\n      if (questionIndex + 1 < metaModel.length) {\r\n        const nextQuestion = metaModel[questionIndex + 1];\r\n        setTimeout(() => {\r\n          setMessages(prev => [\r\n            ...prev,\r\n            { sender: \"bot\", text: `${nextQuestion.label}: ${nextQuestion.description}` }\r\n          ]);\r\n          setCurrentQuestion(nextQuestion);\r\n          setQuestionIndex(questionIndex + 1);\r\n        }, 1000);\r\n      } else {\r\n        setTimeout(() => {\r\n          setMessages(prev => [\r\n            ...prev,\r\n            { sender: \"bot\", text: \"Thanks for your responses! Submitting them now.\" }\r\n          ]);\r\n          submitResponses(updatedResponses);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const submitResponses = async (responses) => {\r\n    try {\r\n      const response = await fetch('/api/submit-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(responses),\r\n      });\r\n      const data = await response.json();\r\n      setMessages(prev => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"Your responses have been saved. Thank you!\" }\r\n      ]);\r\n    } catch (err) {\r\n      setMessages(prev => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"Failed to save responses. Please try again later.\" }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {currentQuestion && (\r\n        <div className=\"chatbot-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={handleKeyPress}\r\n            placeholder={`Type your message...`}\r\n          />\r\n          <button onClick={handleSendMessage}>Send</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElicitationTool;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}