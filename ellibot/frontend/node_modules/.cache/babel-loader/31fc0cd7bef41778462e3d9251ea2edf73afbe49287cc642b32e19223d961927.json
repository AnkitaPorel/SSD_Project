{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const messagesEndRef = useRef(null);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(input.trim());\n      } else {\n        handleMetaModelQuestions();\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = () => {\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\n        handleNestedObject(currentAttribute);\n      } else if (currentAttribute.type === 'array' && currentAttribute.itemType) {\n        handleArray(currentAttribute);\n      } else {\n        handlePrimitive(currentAttribute);\n      }\n    }\n  };\n  const handleNestedObject = attribute => {\n    const nestedAttrIndex = Object.keys(userResponses[attribute.name] || {}).length;\n    const nestedAttribute = attribute.attributes[nestedAttrIndex];\n    if (nestedAttribute) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Could you please specify the ${nestedAttribute.label}?`\n      }]);\n      setUserResponses(prev => ({\n        ...prev,\n        [attribute.name]: {\n          ...prev[attribute.name],\n          [nestedAttribute.name]: input.trim()\n        }\n      }));\n    } else {\n      advanceToNextQuestion();\n    }\n  };\n  const handleArray = attribute => {\n    const arrayResponses = userResponses[attribute.name] || [];\n    const currentItemIndex = arrayResponses.length;\n    if (typeof attribute.itemType === 'object' && attribute.itemType.attributes) {\n      const currentItem = arrayResponses[currentItemIndex] || {};\n      const nestedAttrIndex = Object.keys(currentItem).length;\n      const nestedAttribute = attribute.itemType.attributes[nestedAttrIndex];\n      if (nestedAttribute) {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `For the ${attribute.label}, could you please specify the ${nestedAttribute.label}?`\n        }]);\n        const updatedArrayResponses = [...arrayResponses];\n        updatedArrayResponses[currentItemIndex] = {\n          ...currentItem,\n          [nestedAttribute.name]: input.trim()\n        };\n        setUserResponses(prev => ({\n          ...prev,\n          [attribute.name]: updatedArrayResponses\n        }));\n      } else {\n        // Move to the next item in the array\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: `Please provide details for the next ${attribute.itemType.name || 'item'} in ${attribute.label}.`\n        }]);\n      }\n    } else {\n      // Handle primitive arrays\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Could you please specify an item for ${attribute.label}?`\n      }]);\n      setUserResponses(prev => ({\n        ...prev,\n        [attribute.name]: [...arrayResponses, input.trim()]\n      }));\n    }\n  };\n  const handlePrimitive = attribute => {\n    setUserResponses(prev => ({\n      ...prev,\n      [attribute.name]: input.trim()\n    }));\n    advanceToNextQuestion();\n  };\n  const advanceToNextQuestion = () => {\n    const nextIndex = currentQuestionIndex + 1;\n    if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n      setCurrentQuestionIndex(nextIndex);\n      handleMetaModelQuestions();\n    } else {\n      summarizeResponses();\n    }\n  };\n  const summarizeResponses = async () => {\n    let summary = 'Here is a quick summary the responses you gave:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        summary += `${attr.label}:\\n`;\n        attr.attributes.forEach(nestedAttr => {\n          const nestedResponse = (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A';\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\n        });\n      } else {\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: \"Here's what we have so far:\"\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: 'guest'\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving responses:', error);\n    }\n  };\n  const handleDefaultQuestion = response => {\n    const lowercasedResponse = response.toLowerCase();\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!'\n      }]);\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"BPQWXpagOTI11jVBleuftoXxNbY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","messagesEndRef","defaultQuestion","current","scrollIntoView","behavior","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestion","handleMetaModelQuestions","currentAttribute","type","handleNestedObject","itemType","handleArray","handlePrimitive","attribute","nestedAttrIndex","Object","keys","name","length","nestedAttribute","prev","advanceToNextQuestion","arrayResponses","currentItemIndex","currentItem","updatedArrayResponses","nextIndex","summarizeResponses","summary","forEach","attr","userResponse","nestedAttr","nestedResponse","method","headers","body","JSON","stringify","userId","lowercasedResponse","toLowerCase","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(input.trim());\r\n      } else {\r\n        handleMetaModelQuestions();\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = () => {\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n  \r\n    if (currentAttribute) {\r\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\r\n        handleNestedObject(currentAttribute);\r\n      } else if (currentAttribute.type === 'array' && currentAttribute.itemType) {\r\n        handleArray(currentAttribute);\r\n      } else {\r\n        handlePrimitive(currentAttribute);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleNestedObject = (attribute) => {\r\n    const nestedAttrIndex = Object.keys(userResponses[attribute.name] || {}).length;\r\n    const nestedAttribute = attribute.attributes[nestedAttrIndex];\r\n  \r\n    if (nestedAttribute) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: `Could you please specify the ${nestedAttribute.label}?` },\r\n      ]);\r\n  \r\n      setUserResponses((prev) => ({\r\n        ...prev,\r\n        [attribute.name]: {\r\n          ...prev[attribute.name],\r\n          [nestedAttribute.name]: input.trim(),\r\n        },\r\n      }));\r\n    } else {\r\n      advanceToNextQuestion();\r\n    }\r\n  };\r\n  \r\n  const handleArray = (attribute) => {\r\n    const arrayResponses = userResponses[attribute.name] || [];\r\n    const currentItemIndex = arrayResponses.length;\r\n  \r\n    if (typeof attribute.itemType === 'object' && attribute.itemType.attributes) {\r\n      const currentItem = arrayResponses[currentItemIndex] || {};\r\n      const nestedAttrIndex = Object.keys(currentItem).length;\r\n      const nestedAttribute = attribute.itemType.attributes[nestedAttrIndex];\r\n  \r\n      if (nestedAttribute) {\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: `For the ${attribute.label}, could you please specify the ${nestedAttribute.label}?` },\r\n        ]);\r\n  \r\n        const updatedArrayResponses = [...arrayResponses];\r\n        updatedArrayResponses[currentItemIndex] = {\r\n          ...currentItem,\r\n          [nestedAttribute.name]: input.trim(),\r\n        };\r\n  \r\n        setUserResponses((prev) => ({\r\n          ...prev,\r\n          [attribute.name]: updatedArrayResponses,\r\n        }));\r\n      } else {\r\n        // Move to the next item in the array\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: `Please provide details for the next ${attribute.itemType.name || 'item'} in ${attribute.label}.` },\r\n        ]);\r\n      }\r\n    } else {\r\n      // Handle primitive arrays\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: `Could you please specify an item for ${attribute.label}?` },\r\n      ]);\r\n  \r\n      setUserResponses((prev) => ({\r\n        ...prev,\r\n        [attribute.name]: [...arrayResponses, input.trim()],\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handlePrimitive = (attribute) => {\r\n    setUserResponses((prev) => ({\r\n      ...prev,\r\n      [attribute.name]: input.trim(),\r\n    }));\r\n    advanceToNextQuestion();\r\n  };\r\n  \r\n  const advanceToNextQuestion = () => {\r\n    const nextIndex = currentQuestionIndex + 1;\r\n  \r\n    if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n      setCurrentQuestionIndex(nextIndex);\r\n      handleMetaModelQuestions();\r\n    } else {\r\n      summarizeResponses();\r\n    }\r\n  };\r\n  \r\n  const summarizeResponses = async () => {\r\n    let summary = 'Here is a quick summary the responses you gave:\\n';\r\n  \r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name];\r\n      if (attr.type === 'object' && attr.attributes) {\r\n        summary += `${attr.label}:\\n`;\r\n        attr.attributes.forEach((nestedAttr) => {\r\n          const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\r\n        });\r\n      } else {\r\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\r\n      }\r\n    });\r\n  \r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: \"Here's what we have so far:\" },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n  \r\n    setIsDefaultQuestionAsked(true);\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userResponses, userId: 'guest' }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving responses:', error);\r\n    }\r\n  };\r\n  \r\n  const handleDefaultQuestion = (response) => {\r\n    const lowercasedResponse = response.toLowerCase();\r\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}