{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const fetchMetaModel = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/meta-model', {\n        method: 'GET'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Meta-model data:', data); // Log the response data to check\n\n        setMetaModel(data);\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: \"Here's the meta-model data!\"\n        }]);\n        setTimeout(() => {\n          // Display the msg and the actual meta-model data\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: data.msg\n          }, {\n            sender: \"bot\",\n            text: JSON.stringify(data.data, null, 2)\n          }]);\n        }, 1000);\n      } else {\n        throw new Error('Failed to fetch meta-model');\n      }\n    } catch (error) {\n      console.error('Error fetching meta-model:', error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: `Error: ${error.message}`\n      }]);\n    }\n  };\n  message;\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages([...messages, {\n        sender: \"user\",\n        text: input\n      }]);\n      setInput('');\n\n      // Trigger the fetchMetaModel function when 'meta-model' is mentioned\n      if (input.toLowerCase().includes('meta-model')) {\n        console.log(\"Fetching meta-model from user input...\");\n        fetchMetaModel();\n      } else {\n        setTimeout(() => {\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Thanks for the input! What else?\"\n          }]);\n        }, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"UJYnwoN4n6Tw4aQsGhPJ+Ump7lY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","metaModel","setMetaModel","fetchMetaModel","response","fetch","method","ok","data","json","console","log","prev","setTimeout","msg","JSON","stringify","Error","error","message","handleSendMessage","trim","toLowerCase","includes","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"Hello! How can I help you today?\" }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n\r\n  const fetchMetaModel = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/meta-model', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Meta-model data:', data);  // Log the response data to check\r\n\r\n        setMetaModel(data);\r\n        setMessages(prev => [...prev, { sender: \"bot\", text: \"Here's the meta-model data!\" }]);\r\n        setTimeout(() => {\r\n          // Display the msg and the actual meta-model data\r\n          setMessages(prev => [\r\n            ...prev, \r\n            { sender: \"bot\", text: data.msg },\r\n            { sender: \"bot\", text: JSON.stringify(data.data, null, 2) }\r\n          ]);\r\n        }, 1000);\r\n      } else {\r\n        throw new Error('Failed to fetch meta-model');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching meta-model:', error);\r\n      setMessages(prev => [...prev, { sender: \"bot\", text: `Error: ${error.message}` }]);\r\n    }\r\n  };\r\n  message\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages([...messages, { sender: \"user\", text: input }]);\r\n      setInput('');\r\n\r\n      // Trigger the fetchMetaModel function when 'meta-model' is mentioned\r\n      if (input.toLowerCase().includes('meta-model')) {\r\n        console.log(\"Fetching meta-model from user input...\");\r\n        fetchMetaModel();\r\n      } else {\r\n        setTimeout(() => {\r\n          setMessages(prev => [...prev, { sender: \"bot\", text: \"Thanks for the input! What else?\" }]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`chatbot-message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}