{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const messagesEndRef = useRef(null);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(input.trim());\n      } else {\n        handleMetaModelQuestions();\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = () => {\n    const questionQueue = [];\n    const currentResponses = {\n      ...userResponses\n    };\n    const enqueueQuestions = (attribute, path = []) => {\n      if (attribute.type === \"array\" && attribute.itemType) {\n        const arrayPath = [...path, attribute.name];\n        const arrayResponses = path.reduce((obj, key) => obj[key], currentResponses) || [];\n        arrayResponses.forEach((_, index) => {\n          questionQueue.push({\n            path: [...arrayPath, index],\n            attribute: attribute.itemType\n          });\n        });\n        questionQueue.push({\n          path: arrayPath,\n          attribute,\n          newArrayItem: true\n        });\n      } else if (attribute.type === \"object\" && attribute.attributes) {\n        attribute.attributes.forEach(nestedAttr => {\n          questionQueue.push({\n            path: [...path, attribute.name],\n            attribute: nestedAttr\n          });\n        });\n      } else {\n        questionQueue.push({\n          path,\n          attribute\n        });\n      }\n    };\n    metaModel.data.reportMetaModel.attributes.forEach(attr => enqueueQuestions(attr));\n    const processNextQuestion = (userInput = null) => {\n      if (questionQueue.length === 0) {\n        summarizeResponses();\n        return;\n      }\n      const {\n        path,\n        attribute,\n        newArrayItem\n      } = questionQueue.shift();\n      if (userInput !== null) {\n        let currentLevel = currentResponses;\n        path.slice(0, -1).forEach(key => {\n          if (!currentLevel[key]) currentLevel[key] = isNaN(key) ? {} : [];\n          currentLevel = currentLevel[key];\n        });\n        const key = path[path.length - 1];\n        if (newArrayItem) {\n          currentLevel[key] = currentLevel[key] || [];\n          currentLevel[key].push({});\n        } else {\n          currentLevel[key] = userInput;\n        }\n      }\n      if (questionQueue.length > 0) {\n        const next = questionQueue[0];\n        const questionText = next.newArrayItem ? `Would you like to add a new item to ${next.attribute.label}? (yes/no)` : `Could you please specify the ${next.attribute.label}?`;\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: questionText\n        }]);\n      } else {\n        summarizeResponses();\n      }\n    };\n    const handleUserInput = userInput => {\n      var _questionQueue$;\n      if ((_questionQueue$ = questionQueue[0]) !== null && _questionQueue$ !== void 0 && _questionQueue$.newArrayItem) {\n        if (userInput.toLowerCase() === \"yes\") {\n          questionQueue.unshift({\n            path: questionQueue[0].path,\n            attribute: questionQueue[0].attribute.itemType,\n            newArrayItem: false\n          });\n        } else if (userInput.toLowerCase() === \"no\") {\n          questionQueue.shift();\n        }\n      }\n      processNextQuestion(userInput);\n    };\n    processNextQuestion();\n  };\n  const summarizeResponses = async () => {\n    let summary = 'Here is a quick summary the responses you gave:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        summary += `${attr.label}:, `;\n        attr.attributes.forEach(nestedAttr => {\n          const nestedResponse = (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A';\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}, `;\n        });\n      } else {\n        summary += `${attr.label}: ${userResponse || 'N/A'}, `;\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: \"Here's what we have so far:\"\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: 'guest'\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving responses:', error);\n    }\n  };\n  const handleDefaultQuestion = response => {\n    const lowercasedResponse = response.toLowerCase();\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further requirements, feel free to reach out again. Have a great day!'\n      }]);\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"BPQWXpagOTI11jVBleuftoXxNbY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","messagesEndRef","defaultQuestion","current","scrollIntoView","behavior","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestion","handleMetaModelQuestions","questionQueue","currentResponses","enqueueQuestions","attribute","path","type","itemType","arrayPath","name","arrayResponses","reduce","obj","key","forEach","_","index","push","newArrayItem","nestedAttr","attr","processNextQuestion","userInput","length","summarizeResponses","shift","currentLevel","slice","isNaN","next","questionText","prev","handleUserInput","_questionQueue$","toLowerCase","unshift","summary","userResponse","nestedResponse","method","headers","body","JSON","stringify","userId","lowercasedResponse","className","children","map","msg","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(input.trim());\r\n      } else {\r\n        handleMetaModelQuestions();\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = () => {\r\n    const questionQueue = [];\r\n    const currentResponses = { ...userResponses };\r\n  \r\n    const enqueueQuestions = (attribute, path = []) => {\r\n      if (attribute.type === \"array\" && attribute.itemType) {\r\n        const arrayPath = [...path, attribute.name];\r\n        const arrayResponses = path.reduce((obj, key) => obj[key], currentResponses) || [];\r\n        arrayResponses.forEach((_, index) => {\r\n          questionQueue.push({\r\n            path: [...arrayPath, index],\r\n            attribute: attribute.itemType,\r\n          });\r\n        });\r\n        questionQueue.push({\r\n          path: arrayPath,\r\n          attribute,\r\n          newArrayItem: true,\r\n        });\r\n      } else if (attribute.type === \"object\" && attribute.attributes) {\r\n        attribute.attributes.forEach((nestedAttr) => {\r\n          questionQueue.push({ path: [...path, attribute.name], attribute: nestedAttr });\r\n        });\r\n      } else {\r\n        questionQueue.push({ path, attribute });\r\n      }\r\n    };\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => enqueueQuestions(attr));\r\n  \r\n    const processNextQuestion = (userInput = null) => {\r\n      if (questionQueue.length === 0) {\r\n        summarizeResponses();\r\n        return;\r\n      }\r\n  \r\n      const { path, attribute, newArrayItem } = questionQueue.shift();\r\n      if (userInput !== null) {\r\n        let currentLevel = currentResponses;\r\n        path.slice(0, -1).forEach((key) => {\r\n          if (!currentLevel[key]) currentLevel[key] = isNaN(key) ? {} : [];\r\n          currentLevel = currentLevel[key];\r\n        });\r\n  \r\n        const key = path[path.length - 1];\r\n        if (newArrayItem) {\r\n          currentLevel[key] = currentLevel[key] || [];\r\n          currentLevel[key].push({});\r\n        } else {\r\n          currentLevel[key] = userInput;\r\n        }\r\n      }\r\n\r\n      if (questionQueue.length > 0) {\r\n        const next = questionQueue[0];\r\n        const questionText = next.newArrayItem\r\n          ? `Would you like to add a new item to ${next.attribute.label}? (yes/no)`\r\n          : `Could you please specify the ${next.attribute.label}?`;\r\n        setMessages((prev) => [...prev, { sender: \"bot\", text: questionText }]);\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    };\r\n  \r\n    const handleUserInput = (userInput) => {\r\n      if (questionQueue[0]?.newArrayItem) {\r\n        if (userInput.toLowerCase() === \"yes\") {\r\n          questionQueue.unshift({\r\n            path: questionQueue[0].path,\r\n            attribute: questionQueue[0].attribute.itemType,\r\n            newArrayItem: false,\r\n          });\r\n        } else if (userInput.toLowerCase() === \"no\") {\r\n          questionQueue.shift();\r\n        }\r\n      }\r\n      processNextQuestion(userInput);\r\n    };\r\n    processNextQuestion();\r\n  };  \r\n  \r\n  const summarizeResponses = async () => {\r\n    let summary = 'Here is a quick summary the responses you gave:\\n';\r\n  \r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name];\r\n      if (attr.type === 'object' && attr.attributes) {\r\n        summary += `${attr.label}:, `;\r\n        attr.attributes.forEach((nestedAttr) => {\r\n          const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}, `;\r\n        });\r\n      } else {\r\n        summary += `${attr.label}: ${userResponse || 'N/A'}, `;\r\n      }\r\n    });\r\n  \r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: \"Here's what we have so far:\" },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n  \r\n    setIsDefaultQuestionAsked(true);\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userResponses, userId: 'guest' }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving responses:', error);\r\n    }\r\n  };\r\n  \r\n  const handleDefaultQuestion = (response) => {\r\n    const lowercasedResponse = response.toLowerCase();\r\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further requirements, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACiB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAMmB,cAAc,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMkB,eAAe,GAAG,0EAA0E;EAElGnB,SAAS,CAAC,MAAM;IACd,IAAIkB,cAAc,CAACE,OAAO,EAAE;MAC1BF,cAAc,CAACE,OAAO,CAACC,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;;EAEd;EACAN,SAAS,CAAC,MAAM;IACd,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;QACpE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAE/D,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClClB,YAAY,CAACiB,IAAI,CAAC;QAElBrB,WAAW,CAAC,CACV;UAAEuB,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAE;QAAuB,CAAC,EAC/C;UAAED,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAE,mDAAmDH,IAAI,CAACA,IAAI,CAACI,eAAe,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,KAAK;QAAI,CAAC,CAC7H,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD5B,WAAW,CAAC,CAAC;UAAEuB,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAE,UAAUI,KAAK,CAACE,OAAO;QAAG,CAAC,CAAC,CAAC;MACnE;IACF,CAAC;IAEDd,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI9B,KAAK,CAAC+B,IAAI,CAAC,CAAC,EAAE;MAChBhC,WAAW,CAAEiC,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEV,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEvB,KAAK,CAAC+B,IAAI,CAAC;MAAE,CAAC,CACvC,CAAC;MAEF,IAAIvB,sBAAsB,EAAE;QAC1ByB,qBAAqB,CAACjC,KAAK,CAAC+B,IAAI,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLG,wBAAwB,CAAC,CAAC;MAC5B;MAEAjC,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;EAED,MAAMiC,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,gBAAgB,GAAG;MAAE,GAAG9B;IAAc,CAAC;IAE7C,MAAM+B,gBAAgB,GAAGA,CAACC,SAAS,EAAEC,IAAI,GAAG,EAAE,KAAK;MACjD,IAAID,SAAS,CAACE,IAAI,KAAK,OAAO,IAAIF,SAAS,CAACG,QAAQ,EAAE;QACpD,MAAMC,SAAS,GAAG,CAAC,GAAGH,IAAI,EAAED,SAAS,CAACK,IAAI,CAAC;QAC3C,MAAMC,cAAc,GAAGL,IAAI,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,CAACC,GAAG,CAAC,EAAEX,gBAAgB,CAAC,IAAI,EAAE;QAClFQ,cAAc,CAACI,OAAO,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;UACnCf,aAAa,CAACgB,IAAI,CAAC;YACjBZ,IAAI,EAAE,CAAC,GAAGG,SAAS,EAAEQ,KAAK,CAAC;YAC3BZ,SAAS,EAAEA,SAAS,CAACG;UACvB,CAAC,CAAC;QACJ,CAAC,CAAC;QACFN,aAAa,CAACgB,IAAI,CAAC;UACjBZ,IAAI,EAAEG,SAAS;UACfJ,SAAS;UACTc,YAAY,EAAE;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM,IAAId,SAAS,CAACE,IAAI,KAAK,QAAQ,IAAIF,SAAS,CAACb,UAAU,EAAE;QAC9Da,SAAS,CAACb,UAAU,CAACuB,OAAO,CAAEK,UAAU,IAAK;UAC3ClB,aAAa,CAACgB,IAAI,CAAC;YAAEZ,IAAI,EAAE,CAAC,GAAGA,IAAI,EAAED,SAAS,CAACK,IAAI,CAAC;YAAEL,SAAS,EAAEe;UAAW,CAAC,CAAC;QAChF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLlB,aAAa,CAACgB,IAAI,CAAC;UAAEZ,IAAI;UAAED;QAAU,CAAC,CAAC;MACzC;IACF,CAAC;IACDpC,SAAS,CAACkB,IAAI,CAACI,eAAe,CAACC,UAAU,CAACuB,OAAO,CAAEM,IAAI,IAAKjB,gBAAgB,CAACiB,IAAI,CAAC,CAAC;IAEnF,MAAMC,mBAAmB,GAAGA,CAACC,SAAS,GAAG,IAAI,KAAK;MAChD,IAAIrB,aAAa,CAACsB,MAAM,KAAK,CAAC,EAAE;QAC9BC,kBAAkB,CAAC,CAAC;QACpB;MACF;MAEA,MAAM;QAAEnB,IAAI;QAAED,SAAS;QAAEc;MAAa,CAAC,GAAGjB,aAAa,CAACwB,KAAK,CAAC,CAAC;MAC/D,IAAIH,SAAS,KAAK,IAAI,EAAE;QACtB,IAAII,YAAY,GAAGxB,gBAAgB;QACnCG,IAAI,CAACsB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACb,OAAO,CAAED,GAAG,IAAK;UACjC,IAAI,CAACa,YAAY,CAACb,GAAG,CAAC,EAAEa,YAAY,CAACb,GAAG,CAAC,GAAGe,KAAK,CAACf,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;UAChEa,YAAY,GAAGA,YAAY,CAACb,GAAG,CAAC;QAClC,CAAC,CAAC;QAEF,MAAMA,GAAG,GAAGR,IAAI,CAACA,IAAI,CAACkB,MAAM,GAAG,CAAC,CAAC;QACjC,IAAIL,YAAY,EAAE;UAChBQ,YAAY,CAACb,GAAG,CAAC,GAAGa,YAAY,CAACb,GAAG,CAAC,IAAI,EAAE;UAC3Ca,YAAY,CAACb,GAAG,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,MAAM;UACLS,YAAY,CAACb,GAAG,CAAC,GAAGS,SAAS;QAC/B;MACF;MAEA,IAAIrB,aAAa,CAACsB,MAAM,GAAG,CAAC,EAAE;QAC5B,MAAMM,IAAI,GAAG5B,aAAa,CAAC,CAAC,CAAC;QAC7B,MAAM6B,YAAY,GAAGD,IAAI,CAACX,YAAY,GAClC,uCAAuCW,IAAI,CAACzB,SAAS,CAACZ,KAAK,YAAY,GACvE,gCAAgCqC,IAAI,CAACzB,SAAS,CAACZ,KAAK,GAAG;QAC3D3B,WAAW,CAAEkE,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;UAAE3C,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEyC;QAAa,CAAC,CAAC,CAAC;MACzE,CAAC,MAAM;QACLN,kBAAkB,CAAC,CAAC;MACtB;IACF,CAAC;IAED,MAAMQ,eAAe,GAAIV,SAAS,IAAK;MAAA,IAAAW,eAAA;MACrC,KAAAA,eAAA,GAAIhC,aAAa,CAAC,CAAC,CAAC,cAAAgC,eAAA,eAAhBA,eAAA,CAAkBf,YAAY,EAAE;QAClC,IAAII,SAAS,CAACY,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;UACrCjC,aAAa,CAACkC,OAAO,CAAC;YACpB9B,IAAI,EAAEJ,aAAa,CAAC,CAAC,CAAC,CAACI,IAAI;YAC3BD,SAAS,EAAEH,aAAa,CAAC,CAAC,CAAC,CAACG,SAAS,CAACG,QAAQ;YAC9CW,YAAY,EAAE;UAChB,CAAC,CAAC;QACJ,CAAC,MAAM,IAAII,SAAS,CAACY,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;UAC3CjC,aAAa,CAACwB,KAAK,CAAC,CAAC;QACvB;MACF;MACAJ,mBAAmB,CAACC,SAAS,CAAC;IAChC,CAAC;IACDD,mBAAmB,CAAC,CAAC;EACvB,CAAC;EAED,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAIY,OAAO,GAAG,mDAAmD;IAEjEpE,SAAS,CAACkB,IAAI,CAACI,eAAe,CAACC,UAAU,CAACuB,OAAO,CAAEM,IAAI,IAAK;MAC1D,MAAMiB,YAAY,GAAGjE,aAAa,CAACgD,IAAI,CAACX,IAAI,CAAC;MAC7C,IAAIW,IAAI,CAACd,IAAI,KAAK,QAAQ,IAAIc,IAAI,CAAC7B,UAAU,EAAE;QAC7C6C,OAAO,IAAI,GAAGhB,IAAI,CAAC5B,KAAK,KAAK;QAC7B4B,IAAI,CAAC7B,UAAU,CAACuB,OAAO,CAAEK,UAAU,IAAK;UACtC,MAAMmB,cAAc,GAAG,CAAAD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAGlB,UAAU,CAACV,IAAI,CAAC,KAAI,KAAK;UAC/D2B,OAAO,IAAI,QAAQjB,UAAU,CAAC3B,KAAK,KAAK8C,cAAc,IAAI;QAC5D,CAAC,CAAC;MACJ,CAAC,MAAM;QACLF,OAAO,IAAI,GAAGhB,IAAI,CAAC5B,KAAK,KAAK6C,YAAY,IAAI,KAAK,IAAI;MACxD;IACF,CAAC,CAAC;IAEFxE,WAAW,CAAEiC,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEV,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAE;IAA8B,CAAC,EACtD;MAAED,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAE+C;IAAQ,CAAC,EAChC;MAAEhD,MAAM,EAAE,KAAK;MAAEC,IAAI,EAAEZ;IAAgB,CAAC,CACzC,CAAC;IAEFF,yBAAyB,CAAC,IAAI,CAAC;IAE/B,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5EwD,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEvE,aAAa;UAAEwE,MAAM,EAAE;QAAQ,CAAC;MACzD,CAAC,CAAC;MAEF,IAAI,CAAC9D,QAAQ,CAACE,EAAE,EAAE;QAChBU,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAE,MAAMX,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;MACjE;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMM,qBAAqB,GAAIjB,QAAQ,IAAK;IAC1C,MAAM+D,kBAAkB,GAAG/D,QAAQ,CAACoD,WAAW,CAAC,CAAC;IACjD,IAAIW,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,OAAO,EAAE;MACjEhF,WAAW,CAAEiC,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEV,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA6G,CAAC,CACtI,CAAC;MACFd,yBAAyB,CAAC,KAAK,CAAC;IAClC,CAAC,MAAM;MACLV,WAAW,CAAEiC,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAEV,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE;MAA0E,CAAC,CACnG,CAAC;IACJ;EACF,CAAC;EAED,oBACE5B,OAAA;IAAKqF,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCtF,OAAA;MAAKqF,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAC9BnF,QAAQ,CAACoF,GAAG,CAAC,CAACC,GAAG,EAAEjC,KAAK,kBACvBvD,OAAA;QAAiBqF,SAAS,EAAE,mBAAmBG,GAAG,CAAC7D,MAAM,EAAG;QAAA2D,QAAA,EACzDE,GAAG,CAAC5D;MAAI,GADD2B,KAAK;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN,CAAC,eACF5F,OAAA;QAAK6F,GAAG,EAAE9E;MAAe;QAAA0E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACN5F,OAAA;MAAKqF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BtF,OAAA;QACE6C,IAAI,EAAC,MAAM;QACXiD,KAAK,EAAEzF,KAAM;QACb0F,QAAQ,EAAGC,CAAC,IAAK1F,QAAQ,CAAC0F,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,WAAW,EAAC,sBAAsB;QAClCC,SAAS,EAAGH,CAAC,IAAKA,CAAC,CAAC5C,GAAG,KAAK,OAAO,IAAIjB,iBAAiB,CAAC;MAAE;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC,eACF5F,OAAA;QAAQoG,OAAO,EAAEjE,iBAAkB;QAAAmD,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1F,EAAA,CAvNID,OAAO;AAAAoG,EAAA,GAAPpG,OAAO;AAyNb,eAAeA,OAAO;AAAC,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}