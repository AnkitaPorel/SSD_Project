{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const messagesEndRef = useRef(null);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(input.trim());\n      } else {\n        processNextQuestion(input.trim());\n      }\n      setInput('');\n    }\n  };\n  const enqueueQuestions = (metaAttributes, responses = userResponses, path = []) => {\n    const questionQueue = [];\n    const processAttributes = (attributes, parentPath) => {\n      attributes.forEach(attribute => {\n        const fullPath = [...parentPath, attribute.name];\n        const responseExists = fullPath.reduce((acc, key) => acc === null || acc === void 0 ? void 0 : acc[key], responses);\n        if (!responseExists) {\n          if (attribute.type === 'object' && attribute.attributes) {\n            processAttributes(attribute.attributes, fullPath);\n          } else if (attribute.type === 'array' && attribute.itemType) {\n            const arrayData = fullPath.reduce((acc, key) => acc[key] || [], responses);\n            arrayData.forEach((_, index) => {\n              questionQueue.push({\n                path: [...fullPath, index],\n                attribute: attribute.itemType\n              });\n            });\n            questionQueue.push({\n              path: fullPath,\n              attribute,\n              newArrayItem: true\n            });\n          } else {\n            questionQueue.push({\n              path: fullPath,\n              attribute\n            });\n          }\n        }\n      });\n    };\n    processAttributes(metaAttributes, path);\n    return questionQueue;\n  };\n  const processNextQuestion = (userInput = null) => {\n    if (!metaModel) return;\n    const metaAttributes = metaModel.data.reportMetaModel.attributes;\n    const questionQueue = enqueueQuestions(metaAttributes, userResponses);\n    const handleQueue = (queue, input = null) => {\n      if (queue.length === 0) {\n        summarizeResponses();\n        return;\n      }\n      const {\n        path,\n        attribute,\n        newArrayItem\n      } = queue.shift();\n\n      // If input is provided, save it to userResponses\n      if (input !== null) {\n        setUserResponses(prevResponses => {\n          const updatedResponses = {\n            ...prevResponses\n          };\n          let currentLevel = updatedResponses;\n\n          // Traverse the path to reach the correct level\n          path.slice(0, -1).forEach(key => {\n            if (!currentLevel[key]) currentLevel[key] = isNaN(key) ? {} : [];\n            currentLevel = currentLevel[key];\n          });\n          const key = path[path.length - 1];\n          if (newArrayItem) {\n            currentLevel[key] = currentLevel[key] || [];\n            currentLevel[key].push({});\n          } else {\n            currentLevel[key] = input;\n          }\n          return updatedResponses;\n        });\n      }\n\n      // Proceed to the next question\n      if (queue.length > 0) {\n        const next = queue[0];\n        const questionText = next.newArrayItem ? `Would you like to add a new item to ${next.attribute.label}? (yes/no)` : `Could you please specify the ${next.attribute.label}?`;\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: questionText\n        }]);\n      } else {\n        summarizeResponses();\n      }\n    };\n    handleQueue(questionQueue, userInput);\n  };\n  const summarizeResponses = async () => {\n    let summary = 'Here is a quick summary of the responses you gave:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        summary += `${attr.label}:\\n`;\n        attr.attributes.forEach(nestedAttr => {\n          const nestedResponse = (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A';\n          summary += `  - ${nestedAttr.label}: ${nestedResponse}\\n`;\n        });\n      } else {\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: \"Here's what we have so far:\"\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: 'guest'\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving responses:', error);\n    }\n  };\n  const handleDefaultQuestion = response => {\n    const lowercasedResponse = response.toLowerCase();\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!'\n      }]);\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"tmJKKiuh5uS+c3t02TMoYHAtxSo=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","messagesEndRef","defaultQuestion","current","scrollIntoView","behavior","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestion","processNextQuestion","enqueueQuestions","metaAttributes","responses","path","questionQueue","processAttributes","parentPath","forEach","attribute","fullPath","name","responseExists","reduce","acc","key","type","itemType","arrayData","_","index","push","newArrayItem","userInput","handleQueue","queue","length","summarizeResponses","shift","prevResponses","updatedResponses","currentLevel","slice","isNaN","next","questionText","prev","summary","attr","userResponse","nestedAttr","nestedResponse","method","headers","body","JSON","stringify","userId","lowercasedResponse","toLowerCase","className","children","map","msg","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(input.trim());\r\n      } else {\r\n        processNextQuestion(input.trim());\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const enqueueQuestions = (metaAttributes, responses = userResponses, path = []) => {\r\n    const questionQueue = [];\r\n\r\n    const processAttributes = (attributes, parentPath) => {\r\n      attributes.forEach((attribute) => {\r\n        const fullPath = [...parentPath, attribute.name];\r\n        const responseExists = fullPath.reduce(\r\n          (acc, key) => acc?.[key],\r\n          responses\r\n        );\r\n\r\n        if (!responseExists) {\r\n          if (attribute.type === 'object' && attribute.attributes) {\r\n            processAttributes(attribute.attributes, fullPath);\r\n          } else if (attribute.type === 'array' && attribute.itemType) {\r\n            const arrayData = fullPath.reduce((acc, key) => acc[key] || [], responses);\r\n            arrayData.forEach((_, index) => {\r\n              questionQueue.push({ path: [...fullPath, index], attribute: attribute.itemType });\r\n            });\r\n            questionQueue.push({ path: fullPath, attribute, newArrayItem: true });\r\n          } else {\r\n            questionQueue.push({ path: fullPath, attribute });\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    processAttributes(metaAttributes, path);\r\n    return questionQueue;\r\n  };\r\n\r\n  const processNextQuestion = (userInput = null) => {\r\n    if (!metaModel) return;\r\n\r\n    const metaAttributes = metaModel.data.reportMetaModel.attributes;\r\n    const questionQueue = enqueueQuestions(metaAttributes, userResponses);\r\n\r\n    const handleQueue = (queue, input = null) => {\r\n      if (queue.length === 0) {\r\n        summarizeResponses();\r\n        return;\r\n      }\r\n\r\n      const { path, attribute, newArrayItem } = queue.shift();\r\n\r\n      // If input is provided, save it to userResponses\r\n      if (input !== null) {\r\n        setUserResponses((prevResponses) => {\r\n          const updatedResponses = { ...prevResponses };\r\n          let currentLevel = updatedResponses;\r\n\r\n          // Traverse the path to reach the correct level\r\n          path.slice(0, -1).forEach((key) => {\r\n            if (!currentLevel[key]) currentLevel[key] = isNaN(key) ? {} : [];\r\n            currentLevel = currentLevel[key];\r\n          });\r\n\r\n          const key = path[path.length - 1];\r\n          if (newArrayItem) {\r\n            currentLevel[key] = currentLevel[key] || [];\r\n            currentLevel[key].push({});\r\n          } else {\r\n            currentLevel[key] = input;\r\n          }\r\n\r\n          return updatedResponses;\r\n        });\r\n      }\r\n\r\n      // Proceed to the next question\r\n      if (queue.length > 0) {\r\n        const next = queue[0];\r\n        const questionText = next.newArrayItem\r\n          ? `Would you like to add a new item to ${next.attribute.label}? (yes/no)`\r\n          : `Could you please specify the ${next.attribute.label}?`;\r\n\r\n        setMessages((prev) => [...prev, { sender: \"bot\", text: questionText }]);\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    };\r\n\r\n    handleQueue(questionQueue, userInput);\r\n  };\r\n\r\n  const summarizeResponses = async () => {\r\n    let summary = 'Here is a quick summary of the responses you gave:\\n';\r\n\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name];\r\n      if (attr.type === 'object' && attr.attributes) {\r\n        summary += `${attr.label}:\\n`;\r\n        attr.attributes.forEach((nestedAttr) => {\r\n          const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n          summary += `  - ${nestedAttr.label}: ${nestedResponse}\\n`;\r\n        });\r\n      } else {\r\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\r\n      }\r\n    });\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: \"Here's what we have so far:\" },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n\r\n    setIsDefaultQuestionAsked(true);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userResponses, userId: 'guest' }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving responses:', error);\r\n    }\r\n  };\r\n\r\n  const handleDefaultQuestion = (response) => {\r\n    const lowercasedResponse = response.toLowerCase();\r\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave') {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}