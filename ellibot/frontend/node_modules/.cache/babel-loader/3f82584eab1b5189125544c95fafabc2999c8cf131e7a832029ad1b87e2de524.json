{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import '../styles/Chatbot.css';\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n//   const [metaModel, setMetaModel] = useState(null);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [userResponses, setUserResponses] = useState({});\n//   const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n//   const messagesEndRef = useRef(null);\n\n//   const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n\n//   useEffect(() => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   }, [messages]);\n\n//   // Fetch meta-model on mount\n//   useEffect(() => {\n//     const fetchMetaModel = async () => {\n//       try {\n//         const response = await fetch('http://localhost:5001/api/meta-model');\n//         if (!response.ok) throw new Error('Failed to fetch meta-model');\n\n//         const data = await response.json();\n//         setMetaModel(data);\n\n//         setMessages([\n//           { sender: 'bot', text: 'Welcome to the chat!' },\n//           { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\n//         ]);\n//       } catch (error) {\n//         console.error('Error fetching meta-model:', error);\n//         setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\n//       }\n//     };\n\n//     fetchMetaModel();\n//   }, []);\n\n//   const handleSendMessage = async () => {\n//     if (input.trim()) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: 'user', text: input.trim() },\n//       ]);\n\n//       if (isDefaultQuestionAsked) {\n//         handleDefaultQuestion(input.trim());\n//       } else {\n//         handleMetaModelQuestions();\n//       }\n\n//       setInput('');\n//     }\n//   };\n\n//   const handleMetaModelQuestions = () => {\n//     const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n\n//     if (currentAttribute) {\n//       if (currentAttribute.type === 'object' && currentAttribute.attributes) {\n//         const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\n//         const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\n\n//         if (nestedAttribute) {\n//           setMessages((prevMessages) => [\n//             ...prevMessages,\n//             { sender: 'bot', text: `Would you like to add anything to the ${nestedAttribute.label}?` },\n//           ]);\n\n//           setUserResponses((prev) => ({\n//             ...prev,\n//             [currentAttribute.name]: {\n//               ...prev[currentAttribute.name],\n//               [nestedAttribute.name]: input.trim(),\n//             },\n//           }));\n//         } else {\n//           setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\n//           if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\n//             handleMetaModelQuestions();\n//           } else {\n//             summarizeResponses();\n//           }\n//         }\n//       } else {\n//         setUserResponses((prev) => ({\n//           ...prev,\n//           [currentAttribute.name]: input.trim(),\n//         }));\n\n//         const nextIndex = currentQuestionIndex + 1;\n\n//         if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n//           const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n//           setMessages((prevMessages) => [\n//             ...prevMessages,\n//             { sender: 'bot', text: `Do you have any requirements for ${nextAttribute.label}?` },\n//           ]);\n//           setCurrentQuestionIndex(nextIndex);\n//         } else {\n//           summarizeResponses();\n//         }\n//       }\n//     }\n//   };\n\n//   const summarizeResponses = async () => {\n//     let summary = 'Here is a quick summary the responses you gave: \\n';\n\n//     metaModel.data.reportMetaModel.attributes.forEach((attr) => {\n//       const userResponse = userResponses[attr.name];\n//       if (attr.type === 'object' && attr.attributes) {\n//         summary += `${attr.label}:\\n`;\n//         attr.attributes.forEach((nestedAttr) => {\n//           const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\n//           summary += `   - ${nestedAttr.label}: ${nestedResponse}, \\n`;\n//         });\n//       } else {\n//         summary += `${attr.label}: ${userResponse || 'N/A'}, n`;\n//       }\n//     });\n\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { sender: 'bot', text: \"Here's what we have so far: \" },\n//       { sender: 'bot', text: summary },\n//       { sender: 'bot', text: defaultQuestion },\n//     ]);\n\n//     setIsDefaultQuestionAsked(true);\n\n//     try {\n//       const response = await fetch('http://localhost:5001/api/save-user-responses', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ userResponses, userId: 'guest' }),\n//       });\n\n//       if (!response.ok) {\n//         console.error('Error saving responses:', await response.json());\n//       }\n//     } catch (error) {\n//       console.error('Error saving responses:', error);\n//     }\n//   };\n\n//   const handleDefaultQuestion = (response) => {\n//     const lowercasedResponse = response.toLowerCase();\n//     if (lowercasedResponse === 'no' || lowercasedResponse === 'leave' || lowercasedResponse === 'exit') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\n//       ]);\n//       setIsDefaultQuestionAsked(false);\n//       const updatedResponses = {\n//         ...userResponses,\n//         additionalNotes: 'No additional input',\n//       };\n//       saveResponsesToDatabase(updatedResponses);\n//     } else {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\n//       ]);\n\n//       const updatedResponses = {\n//         ...userResponses,\n//         additionalNotes: response.trim(),\n//       };\n//       setUserResponses(updatedResponses);\n//       saveResponsesToDatabase(updatedResponses);\n//     }\n//   };\n\n//   const saveResponsesToDatabase = async (responses) => {\n//     try {\n//       const response = await fetch('http://localhost:5001/api/save-user-responses', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ userResponses: responses,userId: 'guest' }),\n//       });\n//       if(!response.ok) {\n//         console.error('Error saving responses:',await response.json());\n//       }\n//     } catch (error) {\n//       console.error('Error saving responses:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-container\">\n//       <div className=\"chatbot-messages\">\n//         {messages.map((msg, index) => (\n//           <div key={index} className={`chatbot-message ${msg.sender}`}>\n//             {msg.text}\n//           </div>\n//         ))}\n//         <div ref={messagesEndRef}></div>\n//       </div>\n//       <div className=\"chatbot-input\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//           placeholder=\"Type your message...\"\n//           onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\n//         />\n//         <button onClick={handleSendMessage}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const messagesEndRef = useRef(null);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n\n  // Helper to save the chat state to localStorage\n  const saveToLocalStorage = () => {\n    localStorage.setItem('chatHistory', JSON.stringify(messages));\n    localStorage.setItem('chatState', JSON.stringify({\n      metaModel,\n      currentQuestionIndex,\n      userResponses,\n      isDefaultQuestionAsked\n    }));\n  };\n\n  // Restore chat state on component mount\n  useEffect(() => {\n    const savedChat = JSON.parse(localStorage.getItem('chatHistory'));\n    const savedState = JSON.parse(localStorage.getItem('chatState'));\n    if (savedChat) {\n      setMessages(savedChat);\n    }\n    if (savedState) {\n      setMetaModel(savedState.metaModel);\n      setCurrentQuestionIndex(savedState.currentQuestionIndex);\n      setUserResponses(savedState.userResponses);\n      setIsDefaultQuestionAsked(savedState.isDefaultQuestionAsked);\n    }\n  }, []);\n\n  // Save chat state to localStorage on updates\n  useEffect(() => {\n    saveToLocalStorage();\n  }, [messages, metaModel, currentQuestionIndex, userResponses, isDefaultQuestionAsked]);\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Fetch meta-model on first load\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n\n        // Only initialize chat if no existing messages\n        if (!messages.length) {\n          setMessages([{\n            sender: 'bot',\n            text: 'Welcome to the chat!'\n          }, {\n            sender: 'bot',\n            text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n          }]);\n        }\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    if (!metaModel) {\n      fetchMetaModel();\n    }\n  }, [metaModel, messages]);\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      const userMessage = input.trim();\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: userMessage\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(userMessage);\n      } else {\n        handleMetaModelQuestions(userMessage);\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = userMessage => {\n    if (!metaModel) return;\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\n        if (nestedAttribute) {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Would you like to add anything to the ${nestedAttribute.label}?`\n          }]);\n          setUserResponses(prev => ({\n            ...prev,\n            [currentAttribute.name]: {\n              ...prev[currentAttribute.name],\n              [nestedAttribute.name]: userMessage\n            }\n          }));\n        } else {\n          setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n          handleNextQuestion();\n        }\n      } else {\n        setUserResponses(prev => ({\n          ...prev,\n          [currentAttribute.name]: userMessage\n        }));\n        handleNextQuestion();\n      }\n    }\n  };\n  const handleNextQuestion = () => {\n    const nextIndex = currentQuestionIndex + 1;\n    if (metaModel && nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n      const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: `Do you have any requirements for ${nextAttribute.label}?`\n      }]);\n      setCurrentQuestionIndex(nextIndex);\n    } else {\n      summarizeResponses();\n    }\n  };\n  const summarizeResponses = () => {\n    if (!metaModel) return;\n    let summary = 'Here is a quick summary of the responses you provided:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        summary += `${attr.label}:\\n`;\n        attr.attributes.forEach(nestedAttr => {\n          const nestedResponse = (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A';\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\n        });\n      } else {\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n  };\n  const handleDefaultQuestion = userMessage => {\n    const response = userMessage.toLowerCase();\n    if (['no', 'exit', 'leave'].includes(response)) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!'\n      }]);\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n      setUserResponses(prev => ({\n        ...prev,\n        additionalNotes: userMessage.trim()\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 423,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"5VCxdKWaRLX3msLaWV5H3b9XHlM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","messagesEndRef","defaultQuestion","saveToLocalStorage","localStorage","setItem","JSON","stringify","savedChat","parse","getItem","savedState","current","scrollIntoView","behavior","fetchMetaModel","response","fetch","ok","Error","data","json","length","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","userMessage","prevMessages","handleDefaultQuestion","handleMetaModelQuestions","currentAttribute","type","nestedAttrIndex","Object","keys","name","nestedAttribute","prev","prevIndex","handleNextQuestion","nextIndex","nextAttribute","summarizeResponses","summary","forEach","attr","userResponse","nestedAttr","nestedResponse","toLowerCase","includes","additionalNotes","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import '../styles/Chatbot.css';\r\n\r\n// const Chatbot = () => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [input, setInput] = useState('');\r\n//   const [metaModel, setMetaModel] = useState(null);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [userResponses, setUserResponses] = useState({});\r\n//   const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n//   useEffect(() => {\r\n//     if (messagesEndRef.current) {\r\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n//     }\r\n//   }, [messages]);\r\n\r\n//   // Fetch meta-model on mount\r\n//   useEffect(() => {\r\n//     const fetchMetaModel = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:5001/api/meta-model');\r\n//         if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n//         const data = await response.json();\r\n//         setMetaModel(data);\r\n\r\n//         setMessages([\r\n//           { sender: 'bot', text: 'Welcome to the chat!' },\r\n//           { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n//         ]);\r\n//       } catch (error) {\r\n//         console.error('Error fetching meta-model:', error);\r\n//         setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n//       }\r\n//     };\r\n\r\n//     fetchMetaModel();\r\n//   }, []);\r\n\r\n//   const handleSendMessage = async () => {\r\n//     if (input.trim()) {\r\n//       setMessages((prevMessages) => [\r\n//         ...prevMessages,\r\n//         { sender: 'user', text: input.trim() },\r\n//       ]);\r\n\r\n//       if (isDefaultQuestionAsked) {\r\n//         handleDefaultQuestion(input.trim());\r\n//       } else {\r\n//         handleMetaModelQuestions();\r\n//       }\r\n\r\n//       setInput('');\r\n//     }\r\n//   };\r\n\r\n//   const handleMetaModelQuestions = () => {\r\n//     const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n  \r\n//     if (currentAttribute) {\r\n//       if (currentAttribute.type === 'object' && currentAttribute.attributes) {\r\n//         const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\r\n//         const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\r\n  \r\n//         if (nestedAttribute) {\r\n//           setMessages((prevMessages) => [\r\n//             ...prevMessages,\r\n//             { sender: 'bot', text: `Would you like to add anything to the ${nestedAttribute.label}?` },\r\n//           ]);\r\n  \r\n//           setUserResponses((prev) => ({\r\n//             ...prev,\r\n//             [currentAttribute.name]: {\r\n//               ...prev[currentAttribute.name],\r\n//               [nestedAttribute.name]: input.trim(),\r\n//             },\r\n//           }));\r\n//         } else {\r\n//           setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n//           if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\r\n//             handleMetaModelQuestions();\r\n//           } else {\r\n//             summarizeResponses();\r\n//           }\r\n//         }\r\n//       } else {\r\n//         setUserResponses((prev) => ({\r\n//           ...prev,\r\n//           [currentAttribute.name]: input.trim(),\r\n//         }));\r\n  \r\n//         const nextIndex = currentQuestionIndex + 1;\r\n  \r\n//         if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n//           const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n//           setMessages((prevMessages) => [\r\n//             ...prevMessages,\r\n//             { sender: 'bot', text: `Do you have any requirements for ${nextAttribute.label}?` },\r\n//           ]);\r\n//           setCurrentQuestionIndex(nextIndex);\r\n//         } else {\r\n//           summarizeResponses();\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n//   const summarizeResponses = async () => {\r\n//     let summary = 'Here is a quick summary the responses you gave: \\n';\r\n  \r\n//     metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n//       const userResponse = userResponses[attr.name];\r\n//       if (attr.type === 'object' && attr.attributes) {\r\n//         summary += `${attr.label}:\\n`;\r\n//         attr.attributes.forEach((nestedAttr) => {\r\n//           const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n//           summary += `   - ${nestedAttr.label}: ${nestedResponse}, \\n`;\r\n//         });\r\n//       } else {\r\n//         summary += `${attr.label}: ${userResponse || 'N/A'}, n`;\r\n//       }\r\n//     });\r\n  \r\n//     setMessages((prevMessages) => [\r\n//       ...prevMessages,\r\n//       { sender: 'bot', text: \"Here's what we have so far: \" },\r\n//       { sender: 'bot', text: summary },\r\n//       { sender: 'bot', text: defaultQuestion },\r\n//     ]);\r\n  \r\n//     setIsDefaultQuestionAsked(true);\r\n    \r\n//     try {\r\n//       const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ userResponses, userId: 'guest' }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         console.error('Error saving responses:', await response.json());\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error saving responses:', error);\r\n//     }\r\n//   };\r\n  \r\n//   const handleDefaultQuestion = (response) => {\r\n//     const lowercasedResponse = response.toLowerCase();\r\n//     if (lowercasedResponse === 'no' || lowercasedResponse === 'leave' || lowercasedResponse === 'exit') {\r\n//       setMessages((prevMessages) => [\r\n//         ...prevMessages,\r\n//         { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n//       ]);\r\n//       setIsDefaultQuestionAsked(false);\r\n//       const updatedResponses = {\r\n//         ...userResponses,\r\n//         additionalNotes: 'No additional input',\r\n//       };\r\n//       saveResponsesToDatabase(updatedResponses);\r\n//     } else {\r\n//       setMessages((prevMessages) => [\r\n//         ...prevMessages,\r\n//         { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n//       ]);\r\n\r\n//       const updatedResponses = {\r\n//         ...userResponses,\r\n//         additionalNotes: response.trim(),\r\n//       };\r\n//       setUserResponses(updatedResponses);\r\n//       saveResponsesToDatabase(updatedResponses);\r\n//     }\r\n//   };\r\n\r\n//   const saveResponsesToDatabase = async (responses) => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ userResponses: responses,userId: 'guest' }),\r\n//       });\r\n//       if(!response.ok) {\r\n//         console.error('Error saving responses:',await response.json());\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error saving responses:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chatbot-container\">\r\n//       <div className=\"chatbot-messages\">\r\n//         {messages.map((msg, index) => (\r\n//           <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n//             {msg.text}\r\n//           </div>\r\n//         ))}\r\n//         <div ref={messagesEndRef}></div>\r\n//       </div>\r\n//       <div className=\"chatbot-input\">\r\n//         <input\r\n//           type=\"text\"\r\n//           value={input}\r\n//           onChange={(e) => setInput(e.target.value)}\r\n//           placeholder=\"Type your message...\"\r\n//           onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n//         />\r\n//         <button onClick={handleSendMessage}>Send</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chatbot;\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  // Helper to save the chat state to localStorage\r\n  const saveToLocalStorage = () => {\r\n    localStorage.setItem('chatHistory', JSON.stringify(messages));\r\n    localStorage.setItem(\r\n      'chatState',\r\n      JSON.stringify({\r\n        metaModel,\r\n        currentQuestionIndex,\r\n        userResponses,\r\n        isDefaultQuestionAsked,\r\n      })\r\n    );\r\n  };\r\n\r\n  // Restore chat state on component mount\r\n  useEffect(() => {\r\n    const savedChat = JSON.parse(localStorage.getItem('chatHistory'));\r\n    const savedState = JSON.parse(localStorage.getItem('chatState'));\r\n\r\n    if (savedChat) {\r\n      setMessages(savedChat);\r\n    }\r\n\r\n    if (savedState) {\r\n      setMetaModel(savedState.metaModel);\r\n      setCurrentQuestionIndex(savedState.currentQuestionIndex);\r\n      setUserResponses(savedState.userResponses);\r\n      setIsDefaultQuestionAsked(savedState.isDefaultQuestionAsked);\r\n    }\r\n  }, []);\r\n\r\n  // Save chat state to localStorage on updates\r\n  useEffect(() => {\r\n    saveToLocalStorage();\r\n  }, [messages, metaModel, currentQuestionIndex, userResponses, isDefaultQuestionAsked]);\r\n\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fetch meta-model on first load\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        // Only initialize chat if no existing messages\r\n        if (!messages.length) {\r\n          setMessages([\r\n            { sender: 'bot', text: 'Welcome to the chat!' },\r\n            { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    if (!metaModel) {\r\n      fetchMetaModel();\r\n    }\r\n  }, [metaModel, messages]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      const userMessage = input.trim();\r\n      setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: userMessage }]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(userMessage);\r\n      } else {\r\n        handleMetaModelQuestions(userMessage);\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = (userMessage) => {\r\n    if (!metaModel) return;\r\n\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n\r\n    if (currentAttribute) {\r\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\r\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\r\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\r\n\r\n        if (nestedAttribute) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Would you like to add anything to the ${nestedAttribute.label}?` },\r\n          ]);\r\n\r\n          setUserResponses((prev) => ({\r\n            ...prev,\r\n            [currentAttribute.name]: {\r\n              ...prev[currentAttribute.name],\r\n              [nestedAttribute.name]: userMessage,\r\n            },\r\n          }));\r\n        } else {\r\n          setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n          handleNextQuestion();\r\n        }\r\n      } else {\r\n        setUserResponses((prev) => ({\r\n          ...prev,\r\n          [currentAttribute.name]: userMessage,\r\n        }));\r\n\r\n        handleNextQuestion();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    const nextIndex = currentQuestionIndex + 1;\r\n\r\n    if (metaModel && nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n      const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: `Do you have any requirements for ${nextAttribute.label}?` },\r\n      ]);\r\n      setCurrentQuestionIndex(nextIndex);\r\n    } else {\r\n      summarizeResponses();\r\n    }\r\n  };\r\n\r\n  const summarizeResponses = () => {\r\n    if (!metaModel) return;\r\n\r\n    let summary = 'Here is a quick summary of the responses you provided:\\n';\r\n\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name];\r\n      if (attr.type === 'object' && attr.attributes) {\r\n        summary += `${attr.label}:\\n`;\r\n        attr.attributes.forEach((nestedAttr) => {\r\n          const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\r\n        });\r\n      } else {\r\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\r\n      }\r\n    });\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n\r\n    setIsDefaultQuestionAsked(true);\r\n  };\r\n\r\n  const handleDefaultQuestion = (userMessage) => {\r\n    const response = userMessage.toLowerCase();\r\n\r\n    if (['no', 'exit', 'leave'].includes(response)) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n\r\n      setUserResponses((prev) => ({\r\n        ...prev,\r\n        additionalNotes: userMessage.trim(),\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}