{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [userEmail, setUserEmail] = useState('');\n  const [additionalRequirements, setAdditionalRequirements] = useState('');\n  const [summaries, setSummaries] = useState([]);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n\n  // Fetch user email from localStorage on mount\n  useEffect(() => {\n    const email = localStorage.getItem('userEmail');\n    if (email) {\n      setUserEmail(email);\n    }\n  }, []);\n\n  // Scroll to the latest message\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n\n  // Handle sending a message\n  const handleSendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestion(input.trim());\n      } else {\n        handleMetaModelQuestions();\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = () => {\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\n        if (nestedAttribute) {\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Would you like to add anything to the ${nestedAttribute.label}?`\n          }]);\n          setUserResponses(prev => ({\n            ...prev,\n            [currentAttribute.name]: {\n              ...prev[currentAttribute.name],\n              [nestedAttribute.name]: input.trim()\n            }\n          }));\n        } else {\n          setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n          if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\n            handleMetaModelQuestions();\n          } else {\n            summarizeResponses();\n          }\n        }\n      } else {\n        setUserResponses(prev => ({\n          ...prev,\n          [currentAttribute.name]: input.trim()\n        }));\n        const nextIndex = currentQuestionIndex + 1;\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n          setMessages(prevMessages => [...prevMessages, {\n            sender: 'bot',\n            text: `Do you have any requirements for ${nextAttribute.label}?`\n          }]);\n          setCurrentQuestionIndex(nextIndex);\n        } else {\n          summarizeResponses();\n        }\n      }\n    }\n  };\n  const saveFinalResponses = async (newRequirement = additionalRequirements) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: userEmail || 'guest',\n          additionalRequirements: newRequirement\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving final responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving final responses:', error);\n    }\n  };\n  const fetchSummaries = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/api/get-summaries');\n      if (!response.ok) throw new Error('Failed to fetch summaries');\n      const data = await response.json();\n      setSummaries(data.summaries); // Updated state\n    } catch (error) {\n      console.error('Error fetching summaries:', error);\n    }\n  };\n  useEffect(() => {\n    fetchSummaries();\n  }, []);\n  const summarizeResponses = async () => {\n    let summary = 'Here is a quick summary of the responses you gave:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name];\n      if (attr.type === 'object' && attr.attributes) {\n        summary += `${attr.label}:\\n`;\n        attr.attributes.forEach(nestedAttr => {\n          const nestedResponse = (userResponse === null || userResponse === void 0 ? void 0 : userResponse[nestedAttr.name]) || 'N/A';\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\n        });\n      } else {\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\n      }\n    });\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: \"Here's what we have so far:\"\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n    try {\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userResponses,\n          userId: userEmail || 'guest',\n          additionalRequirements\n        })\n      });\n      if (!response.ok) {\n        console.error('Error saving responses:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error saving responses:', error);\n    }\n  };\n  const handleDefaultQuestion = response => {\n    const lowercasedResponse = response.toLowerCase();\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave' || lowercasedResponse === 'exit') {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!'\n      }]);\n      saveFinalResponses();\n      setIsDefaultQuestionAsked(false);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Got it. Please share any additional details or clarifications you have.'\n      }]);\n      setAdditionalRequirements(prev => `${prev}\\n${response}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HUI039MlqmBnoXC+gqi/xhlB58w=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","messagesEndRef","userEmail","setUserEmail","additionalRequirements","setAdditionalRequirements","summaries","setSummaries","defaultQuestion","email","localStorage","getItem","current","scrollIntoView","behavior","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestion","handleMetaModelQuestions","currentAttribute","type","nestedAttrIndex","Object","keys","name","length","nestedAttribute","prev","prevIndex","summarizeResponses","nextIndex","nextAttribute","saveFinalResponses","newRequirement","method","headers","body","JSON","stringify","userId","fetchSummaries","summary","forEach","attr","userResponse","nestedAttr","nestedResponse","lowercasedResponse","toLowerCase","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [additionalRequirements, setAdditionalRequirements] = useState('');\r\n  const [summaries, setSummaries] = useState([]);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  // Fetch user email from localStorage on mount\r\n  useEffect(() => {\r\n    const email = localStorage.getItem('userEmail');\r\n    if (email) {\r\n      setUserEmail(email);\r\n    }\r\n  }, []);\r\n\r\n  // Scroll to the latest message\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n\r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n\r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Letâ€™s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  // Handle sending a message\r\n  const handleSendMessage = async () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestion(input.trim());\r\n      } else {\r\n        handleMetaModelQuestions();\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = () => {\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n\r\n    if (currentAttribute) {\r\n      if (currentAttribute.type === 'object' && currentAttribute.attributes) {\r\n        const nestedAttrIndex = Object.keys(userResponses[currentAttribute.name] || {}).length;\r\n        const nestedAttribute = currentAttribute.attributes[nestedAttrIndex];\r\n\r\n        if (nestedAttribute) {\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Would you like to add anything to the ${nestedAttribute.label}?` },\r\n          ]);\r\n\r\n          setUserResponses((prev) => ({\r\n            ...prev,\r\n            [currentAttribute.name]: {\r\n              ...prev[currentAttribute.name],\r\n              [nestedAttribute.name]: input.trim(),\r\n            },\r\n          }));\r\n        } else {\r\n          setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n          if (currentQuestionIndex + 1 < metaModel.data.reportMetaModel.attributes.length) {\r\n            handleMetaModelQuestions();\r\n          } else {\r\n            summarizeResponses();\r\n          }\r\n        }\r\n      } else {\r\n        setUserResponses((prev) => ({\r\n          ...prev,\r\n          [currentAttribute.name]: input.trim(),\r\n        }));\r\n\r\n        const nextIndex = currentQuestionIndex + 1;\r\n\r\n        if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n          const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: 'bot', text: `Do you have any requirements for ${nextAttribute.label}?` },\r\n          ]);\r\n          setCurrentQuestionIndex(nextIndex);\r\n        } else {\r\n          summarizeResponses();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveFinalResponses = async (newRequirement = additionalRequirements) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          userResponses,\r\n          userId: userEmail || 'guest',\r\n          additionalRequirements: newRequirement,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving final responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving final responses:', error);\r\n    }\r\n  };\r\n\r\n  const fetchSummaries = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/get-summaries');\r\n      if (!response.ok) throw new Error('Failed to fetch summaries');\r\n      const data = await response.json();\r\n      setSummaries(data.summaries); // Updated state\r\n    } catch (error) {\r\n      console.error('Error fetching summaries:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSummaries();\r\n  }, []);\r\n\r\n  const summarizeResponses = async () => {\r\n    let summary = 'Here is a quick summary of the responses you gave:\\n';\r\n\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name];\r\n      if (attr.type === 'object' && attr.attributes) {\r\n        summary += `${attr.label}:\\n`;\r\n        attr.attributes.forEach((nestedAttr) => {\r\n          const nestedResponse = userResponse?.[nestedAttr.name] || 'N/A';\r\n          summary += `   - ${nestedAttr.label}: ${nestedResponse}\\n`;\r\n        });\r\n      } else {\r\n        summary += `${attr.label}: ${userResponse || 'N/A'}\\n`;\r\n      }\r\n    });\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: \"Here's what we have so far:\" },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n\r\n    setIsDefaultQuestionAsked(true);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/save-user-responses', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          userResponses,\r\n          userId: userEmail || 'guest',\r\n          additionalRequirements,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Error saving responses:', await response.json());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving responses:', error);\r\n    }\r\n  };\r\n\r\n  const handleDefaultQuestion = (response) => {\r\n    const lowercasedResponse = response.toLowerCase();\r\n    if (lowercasedResponse === 'no' || lowercasedResponse === 'leave' || lowercasedResponse === 'exit') {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Thank you for your time! If you need further assistance, feel free to reach out again. Have a great day!' },\r\n      ]);\r\n      saveFinalResponses();\r\n      setIsDefaultQuestionAsked(false);\r\n    } else {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'Got it. Please share any additional details or clarifications you have.' },\r\n      ]);\r\n      setAdditionalRequirements((prev) => `${prev}\\n${response}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}