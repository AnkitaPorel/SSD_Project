{"ast":null,"code":"var _jsxFileName = \"/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [metaModel, setMetaModel] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponses, setUserResponses] = useState({});\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\n\n  // Fetch meta-model on mount\n  useEffect(() => {\n    const fetchMetaModel = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/meta-model');\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\n        const data = await response.json();\n        setMetaModel(data);\n        setMessages([{\n          sender: 'bot',\n          text: 'Welcome to the chat!'\n        }, {\n          sender: 'bot',\n          text: `Let’s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?`\n        }]);\n      } catch (error) {\n        console.error('Error fetching meta-model:', error);\n        setMessages([{\n          sender: 'bot',\n          text: `Error: ${error.message}`\n        }]);\n      }\n    };\n    fetchMetaModel();\n  }, []);\n  const handleSendMessage = () => {\n    if (input.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: input.trim()\n      }]);\n      if (isDefaultQuestionAsked) {\n        handleDefaultQuestionResponse();\n      } else if (metaModel) {\n        handleMetaModelQuestions();\n      }\n      setInput('');\n    }\n  };\n  const handleMetaModelQuestions = () => {\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\n    if (currentAttribute) {\n      setUserResponses(prev => ({\n        ...prev,\n        [currentAttribute.name]: input.trim()\n      }));\n      const nextIndex = currentQuestionIndex + 1;\n      if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\n        const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\n        const variedQuestions = [`Can you please provide the ${nextAttribute.label}?`, `I need to know the ${nextAttribute.label}. Could you share it?`, `Next, could you specify the ${nextAttribute.label}?`];\n        const randomQuestion = variedQuestions[Math.floor(Math.random() * variedQuestions.length)];\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: randomQuestion\n        }]);\n        setCurrentQuestionIndex(nextIndex);\n      } else {\n        summarizeResponses();\n      }\n    }\n  };\n  const summarizeResponses = () => {\n    let summary = 'Here is a quick summary of what you’ve shared:\\n';\n    metaModel.data.reportMetaModel.attributes.forEach(attr => {\n      const userResponse = userResponses[attr.name] || 'N/A';\n      summary += `${attr.label}: ${userResponse}\\n`;\n    });\n    const variedSummaryMessages = [\"Here's what we have so far:\", \"Here’s a recap of your responses:\", \"This is the information you've provided:\"];\n    const summaryIntro = variedSummaryMessages[Math.floor(Math.random() * variedSummaryMessages.length)];\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: summaryIntro\n    }, {\n      sender: 'bot',\n      text: summary\n    }, {\n      sender: 'bot',\n      text: defaultQuestion\n    }]);\n    setIsDefaultQuestionAsked(true);\n  };\n  const handleDefaultQuestionResponse = () => {\n    const variedFinalMessages = [\"Thank you for your input! Let me know if you'd like to revisit anything.\", \"Got it! If there's nothing else, have a great day!\", \"Thanks for sharing! If you need further assistance, just let me know.\"];\n    const finalMessage = variedFinalMessages[Math.floor(Math.random() * variedFinalMessages.length)];\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'bot',\n      text: finalMessage\n    }]);\n    setIsDefaultQuestionAsked(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chatbot-message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"k0ssCoBkraGqSmS2/GckhEuzHpk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","metaModel","setMetaModel","currentQuestionIndex","setCurrentQuestionIndex","userResponses","setUserResponses","isDefaultQuestionAsked","setIsDefaultQuestionAsked","defaultQuestion","fetchMetaModel","response","fetch","ok","Error","data","json","sender","text","reportMetaModel","attributes","label","error","console","message","handleSendMessage","trim","prevMessages","handleDefaultQuestionResponse","handleMetaModelQuestions","currentAttribute","prev","name","nextIndex","length","nextAttribute","variedQuestions","randomQuestion","Math","floor","random","summarizeResponses","summary","forEach","attr","userResponse","variedSummaryMessages","summaryIntro","variedFinalMessages","finalMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/ankita/Downloads/ELLIBOT/ellibot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [metaModel, setMetaModel] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [isDefaultQuestionAsked, setIsDefaultQuestionAsked] = useState(false);\r\n\r\n  const defaultQuestion = \"Before we finish, is there anything else you'd like to share or clarify?\";\r\n\r\n  // Fetch meta-model on mount\r\n  useEffect(() => {\r\n    const fetchMetaModel = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/meta-model');\r\n        if (!response.ok) throw new Error('Failed to fetch meta-model');\r\n        \r\n        const data = await response.json();\r\n        setMetaModel(data);\r\n        \r\n        setMessages([\r\n          { sender: 'bot', text: 'Welcome to the chat!' },\r\n          { sender: 'bot', text: `Let’s get started. Could you please specify the ${data.data.reportMetaModel.attributes[0].label}?` },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error fetching meta-model:', error);\r\n        setMessages([{ sender: 'bot', text: `Error: ${error.message}` }]);\r\n      }\r\n    };\r\n\r\n    fetchMetaModel();\r\n  }, []);\r\n\r\n  const handleSendMessage = () => {\r\n    if (input.trim()) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'user', text: input.trim() },\r\n      ]);\r\n      if (isDefaultQuestionAsked) {\r\n        handleDefaultQuestionResponse();\r\n      } else if (metaModel) {\r\n        handleMetaModelQuestions();\r\n      }\r\n\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleMetaModelQuestions = () => {\r\n    const currentAttribute = metaModel.data.reportMetaModel.attributes[currentQuestionIndex];\r\n    if (currentAttribute) {\r\n      setUserResponses((prev) => ({\r\n        ...prev,\r\n        [currentAttribute.name]: input.trim(),\r\n      }));\r\n\r\n      const nextIndex = currentQuestionIndex + 1;\r\n      if (nextIndex < metaModel.data.reportMetaModel.attributes.length) {\r\n        const nextAttribute = metaModel.data.reportMetaModel.attributes[nextIndex];\r\n        const variedQuestions = [\r\n          `Can you please provide the ${nextAttribute.label}?`,\r\n          `I need to know the ${nextAttribute.label}. Could you share it?`,\r\n          `Next, could you specify the ${nextAttribute.label}?`,\r\n        ];\r\n        const randomQuestion = variedQuestions[Math.floor(Math.random() * variedQuestions.length)];\r\n\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: randomQuestion },\r\n        ]);\r\n        setCurrentQuestionIndex(nextIndex);\r\n      } else {\r\n        summarizeResponses();\r\n      }\r\n    }\r\n  };\r\n\r\n  const summarizeResponses = () => {\r\n    let summary = 'Here is a quick summary of what you’ve shared:\\n';\r\n    metaModel.data.reportMetaModel.attributes.forEach((attr) => {\r\n      const userResponse = userResponses[attr.name] || 'N/A';\r\n      summary += `${attr.label}: ${userResponse}\\n`;\r\n    });\r\n\r\n    const variedSummaryMessages = [\r\n      \"Here's what we have so far:\",\r\n      \"Here’s a recap of your responses:\",\r\n      \"This is the information you've provided:\",\r\n    ];\r\n    const summaryIntro = variedSummaryMessages[Math.floor(Math.random() * variedSummaryMessages.length)];\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: summaryIntro },\r\n      { sender: 'bot', text: summary },\r\n      { sender: 'bot', text: defaultQuestion },\r\n    ]);\r\n\r\n    setIsDefaultQuestionAsked(true);\r\n  };\r\n\r\n  const handleDefaultQuestionResponse = () => {\r\n    const variedFinalMessages = [\r\n      \"Thank you for your input! Let me know if you'd like to revisit anything.\",\r\n      \"Got it! If there's nothing else, have a great day!\",\r\n      \"Thanks for sharing! If you need further assistance, just let me know.\",\r\n    ];\r\n    const finalMessage = variedFinalMessages[Math.floor(Math.random() * variedFinalMessages.length)];\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: 'bot', text: finalMessage },\r\n    ]);\r\n    setIsDefaultQuestionAsked(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chatbot-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}